Condition: union(unionIdentifier = type)! # 
    properties: 
        else: EffectList? # 
        otherwise: EffectList? # 
    unions: 
        BIOME: BiomeCondition! # 
        BLOCK: BlockCondition! # 
        CHANCE: ChanceCondition! # 
        COOLDOWN: CooldownCondition! # 
        DISTANCE: DistanceCondition! # 
        ENTITY: EntityWhitelistCondition! # 
        FLY: FlyingCondition! # 
        FLYING: FlyingCondition! # 
        GLIDING: GlidingCondition! # 
        HEALTH: HealthCondition! # 
        HEIGHT: HeightCondition! # 
        HERO: SuperheroCondition! # 
        HOTBARSLOT: HotbarSlotCondition! # 
        INBLOCK: InBlockCondition! # 
        ITEM: ItemCondition! # 
        ITEMWRAPPER: ItemWrapperCondition! # 
        LIGHT: LightCondition! # 
        METADATA: MetadataCondition! # 
        NOT: NOTCondition! # 
        NPC: NPCCondition! # 
        ONGROUND: OnGroundCondition! # 
        OR: ORCondition! # 
        POTIONEFFECT: PotionEffectCondition! # 
        SHIELDED: ShieldedCondition! # 
        SHOOTER: ShooterCondition! # 
        SIZE: SizeCondition! # 
        SNEAK: SneakCondition! # 
        SPEED: SpeedCondition! # 
        SPRINTING: SprintingCondition! # 
        SWIMMING: SwimmingCondition! # 
        TAMED: TamedCondition! # 
        TEMPERATURE: TemperatureCondition! # 
        TIME: TimeCondition! # 
        VISIBILITY: VisibilityCondition! # 
        WEATHER: WeatherCondition! # 
        WORLD: WorldCondition! # 
Effect: union(unionIdentifier = type)! # 
    unions: 
        ACTIONBAR: ActionBarEffect! # 
        AOE: AOE! # 
        ARROW: ArrowEffect! # 
        ATTRIBUTE: AttributeEffect! # 
        BLOCKENTITY: BlockEntityEffect! # 
        BONEMEAL: BonemealEffect! # 
        CANCEL: CancelEffect! # 
        CHANGEHERO: ChangeHeroEffect! # 
        COMMAND: CommandEffect! # 
        DAMAGE: DamageEffect! # 
        DISGUISE: DisguiseEffect! # 
        FIRE: IgniteEffect! # 
        FLING: VelocityEffect! # 
        FLY: FlyEffect! # 
        FLYING: FlyEffect! # 
        FREEZE: FreezeEffect! # 
        FURNACEBURNTIME: FurnaceBurnTimeEffect! # 
        GIVEITEM: GiveItemEffect! # 
        GLIDING: GlidingEffect! # 
        HEALTH: HealthEffect! # 
        HUNGER: HungerEffect! # 
        IGNITE: IgniteEffect! # 
        ITEMAMOUNT: ItemAmountEffect! # 
        ITEMMATERIAL: ItemMaterialEffect! # 
        ITEMSTACK: ItemStackWrapperEffect! # 
        KNOCKBACK: KnockbackEffect! # 
        LAUNCH: LaunchEffect! # 
        LIGHTNING: LightningEffect! # 
        LOCATIONCUBE: LocationCubeEffect! # 
        LOCATIONOFFSET: LocationOffsetEffect! # 
        LOSETARGET: LoseTargetEffect! # 
        LUNGE: LungeEffect! # 
        MESSAGE: MessageEffect! # 
        METADATA: MetadataEffect! # 
        NEAREST: NearestEffect! # 
        PARTICLE: ParticleEffect! # 
        PICKUP: Pickup! # 
        PLACEBLOCK: PlaceBlockEffect! # 
        PLAYTRACK: PlayTrackEffect! # 
        POTION: Potion! # 
        PROJECTILE: ProjectileEffect! # 
        RANDOMTELEPORT: RandomTeleportEffect! # 
        RAYTRACE: RaytraceEffect! # 
        REMOVEENTITY: RemoveEntityEffect! # 
        REMOVEPOTION: RemovePotionEffect! # 
        REPULSE: RepulseEffect! # 
        RESIZE: ResizeEffect! # 
        SCRAMBLEINVENTORY: ScrambleInventoryEffect! # 
        SHOOTER: ShooterEffect! # 
        SMITE: LightningEffect! # 
        SOUND: SoundEffect! # 
        SPAWNENTITY: SpawnEffect! # 
        SWAP: SwapEffect! # 
        SWITCHEROO: SwitcherooWrapperEffect! # 
        TARGET: TargetEntityEffect! # 
        TELEPORT: TeleportEffect! # 
        TIMER: TimerEffect! # 
        VEINMINER: VeinMinerEffect! # 
        VELOCITY: VelocityEffect! # 
        WAIT: WaitEffect! # 
        WEB: BlockEntityEffect! # 
EntityComponent: union(unionIdentifier = type)! # 
    unions: 
        /AbstractHorse/: HorseComponent! # 
        /Ageable/: AgeableComponent! # 
        /Arrow/: ArrowComponent! # 
        /Axolotl/: AxolotlComponent! # 
        /Colorable/: ColorableComponent! # 
        /Creeper/: CreeperComponent! # 
        /ExperienceOrb/: ExperienceOrbComponent! # 
        /Explosive/: ExplosiveComponent! # 
        /FallingBlock/: FallingBlockComponent! # 
        /Hoglin/: ZombifiableComponent! # 
        /Item/: DroppedItemComponent! # 
        /LivingEntity/: LivingEntityComponent! # 
        /Llama/: LlamaComponent! # 
        /Phantom/: SizeComponent! # 
        /PiglinAbstract/: ZombifiableComponent! # 
        /Rabbit/: RabbitComponent! # 
        /Slime/: SizeComponent! # 
        /SpectralArrow/: SpectralArrowComponent! # 
        /ThrowableProjectile/: ThrowableProjectileComponent! # 
        /ThrownPotion/: PotionEntityComponent! # 
        /TNTPrimed/: PrimedTntComponent! # 
        /Trident/: AbstractArrowComponent! # 
        /WitherSkull/: WitherSkullComponent! # 
        /Wolf/: WolfComponent! # 
Shape: union(unionIdentifier = type)? # SkillData: union(unionIdentifier = skill)! # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        skill: string? # 
    unions: 
        ATTRIBUTE: AttributeSkillData! # 
        AURA: AuraData! # 
        BEASTCONTROL: BeastControlData! # 
        BLOCKDROPS: BlockDropsData! # 
        BLOCKRAY: BlockRayData! # 
        CLIMB: ClimbData! # 
        CONSUME: ConsumeSkillData! # 
        CONVERTBLOCK: ConvertBlockData! # 
        CONVERTDROPS: ConvertDropsData! # 
        CONVERTITEM: ConvertItemData! # 
        CRAFTING: CraftingData! # 
        CREEPER: CreeperData! # 
        CUSTOM: CustomData! # 
        DAMAGEMODIFIER: DamageModifierData! # 
        DAMAGEPOTION: DamagePotionData! # 
        DAMAGERESISTANCE: DamageResistanceData! # 
        DECOY: DecoyData! # 
        EGGLAYER: EggLayerData! # 
        ERASER: EraserData! # 
        FLIGHT: BlankData! # 
        GIVEITEM: GiveItemData! # 
        GUN: GunData! # 
        HEARTSTEAL: HeartStealData! # 
        INSTANTBREAK: InstantBreakData! # 
        KILLPOTION: KillPotionData! # 
        LIFESTEAL: LifestealData! # 
        LIGHT: LightSkillData! # 
        NOHUNGER: NoHungerData! # 
        OHKO: OHKOData! # 
        PHASE: PhaseData! # 
        PICKPOCKET: PickpocketData! # 
        POTIONEFFECT: PotionEffectSkillData! # 
        POTIONGIFTER: PotionGifterSkillData! # 
        REMOTEDETONATION: RemoteDetonationData! # 
        REPULSION: RepulsionData! # 
        SHIELD: ShieldData! # 
        SLAM: SlamData! # 
        SLIME: SlimeData! # 
        SNEAK: SneakData! # 
        SNEAKINGPOTION: SneakingPotionData! # 
        SPELL: SpellData! # 
        STRONGMAN: StrongmanData! # 
        SUMMON: SummonSkillData! # 
        TELEPORT: TeleportData! # 
        THROWER: ThrowerData! # 
        WALKER: WalkerData! # 
        WEATHERDAMAGE: WeatherDamageData! # 
TriggerData: union(unionIdentifier = type)! # 
    properties: 
        conditions: ConditionList?{} # 
        type: string! # 
    unions: 
        BECOMEVEHICLE: TriggerData! # 
        BLOCKBREAK: TriggerData! # 
        CHANGEMAINHAND: TriggerData! # 
        COMBAT: TriggerData! # 
        CONSUME: TriggerData! # 
        DAMAGED: DamageData! # 
        DAMAGEDBYENTITY: TriggerData! # 
        DAMAGEDBYPROJECTILE: ProjectileData! # 
        DAMAGEDENTITY: TriggerData! # 
        DAMAGEDENTITYWITHPROJECTILE: ProjectileData! # 
        DEATH: TriggerData! # 
        ENTERVEHICLE: TriggerData! # 
        EQUIPARMOR: TriggerData! # 
        EXITVEHICLE: TriggerData! # 
        GAINEDHERO: TriggerData! # 
        INTERACT: InteractData! # 
        INTERACTENTITY: TriggerData! # 
        KILL: TriggerData! # 
        LAUNCHPROJECTILE: TriggerData! # 
        LOOP: LoopData! # 
        LOSTHERO: TriggerData! # 
        MOVE: TriggerData! # 
        PLAYERJOIN: TriggerData! # 
        PLAYERJUMP: TriggerData! # 
        PLAYERQUIT: TriggerData! # 
        POTIONEFFECT: PotionEffectTriggerData! # 
        PROJECTILECOMBAT: ProjectileData! # 
        PROJECTILEHIT: TriggerData! # 
        RIPTIDE: TriggerData! # 
        SNEAK: TriggerData! # 
        SPAWN: TriggerData! # 
        SPRINT: TriggerData! # 
        SWAPHANDS: TriggerData! # 
        TAME: TriggerData! # 
        TARGET: TriggerData! # 
        TARGETED: TriggerData! # 
        TOGGLEGLIDE: TriggerData! # 
        TOGGLESPRINT: TriggerData! # 
        TOTEM: TriggerData! # 
        VEHICLE: TriggerData! # 
AbstractArrowComponent: object(ignoreUnknowns)? # 
    properties: 
        critical: boolean?false # 
        damage: number?2.0 # 
        knockbackStrength: integer?0 # 
        pickupStatus: AbstractArrow.PickupStatus?DISALLOWED # 
        pierceLevel: integer?0 # 
ActionBarEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        message: ExpressiveMessage? # 
AgeableComponent: object(ignoreUnknowns)? # 
    properties: 
        isBaby: boolean?false # 
AOE: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        effects: EffectList?{} # 
        radius: Expression?5 # 
ArrowComponent: object(ignoreUnknowns)? # 
    properties: 
        critical: boolean?false # 
        damage: number?2.0 # 
        knockbackStrength: integer?0 # 
        pickupStatus: AbstractArrow.PickupStatus?DISALLOWED # 
        pierceLevel: integer?0 # 
        potionType: PotionType? # 
ArrowEffect: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - OTHER

        damage: Expression?4 # 
        entity: EntityData?{ type: "ARROW"} # 
        entityData: EntityData?{ type: "ARROW"} # 
        fireTicks: Expression?0 # 
        velocity: Expression?1.0 # 
AttributeEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        attribute: Attribute? # 
        operation: ModifyEffect.Operation?SET # 
        value: Expression?1 # 
AttributesData: object? # 
    properties: 
        attributes: {Attribute: number}?{} # 
        equipmentSlot: EquipmentSlotGroup?ANY # 
        operation: AttributesData.Operation?MULTIPLY_SCALAR # 
        unique_key: string? # 
        uniqueKey: string? # 
AttributeSkillData: object? # 
    properties: 
        attributes: {Attribute: number}! # 
        conditions: ConditionListWrapper?{} # 
        equipment_slot: EquipmentSlotGroup! # 
        equipmentSlot: EquipmentSlotGroup! # 
        operation: AttributesData.Operation! # 
        skill: string? # 
        unique_key: string! # 
        uniqueKey: string! # 
AuraData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        radius: number?5 # 
        skill: string? # 
AxolotlComponent: object(ignoreUnknowns)? # 
    properties: 
        variant: Axolotl.Variant? # 
BeastControlData: object? # 
    properties: 
        attackItself: boolean?false # 
        glowDuration: number?3.0 # 
        maxDistance: number?32.0 # 
        targetMobs: boolean?true # 
BiomeCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        biomes: Biome[]?[] # 
        else: EffectList? # 
        otherwise: EffectList? # 
BlockCondition: object? # 
    properties: 
        mode: enum!LOCATION # 
    values: 
      - ALL
      - LOCATION

        allowedMaterials: Material[]?[] # 
        else: EffectList? # 
        materials: Material[]?[] # 
        otherwise: EffectList? # 
BlockDataComparisonData: object? # 
    properties: 
        age: RangeData?-Infinity - Infinity # 
        level: RangeData?-Infinity - Infinity # 
        types: Material[]?[] # 
BlockDataData: object? # 
    properties: 
        age: integer?-1 # 
        level: integer?-1 # 
        material: Material?STONE # 
        type: Material?STONE # 
BlockDropsData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        convertMap: Multimap?{} # 
        dropToNewDrop: Multimap?{} # 
        replaceDrops: boolean?false # 
        skill: string? # 
BlockEntityEffect: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - OTHER

        blockToPlace: Material?COBWEB # 
        duration: Expression! # 
        durationInTicks: Expression?-1 # 
BlockRayData: object? # 
    properties: 
        blockRayMode: BlockRayMode? # 
        blocksToPlace: Material[]?[] # 
        blocksToReplace: Material[]?[] # 
        conditions: ConditionListWrapper?{} # 
        maxDistance: integer?20 # 
        revertsAfter: Duration?15.0 # 
        shouldRevert: boolean?false # 
        skill: string? # 
BonemealEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        blockFaces: BlockFace[]?[] # 
BookData: object? # 
    properties: 
        author: string! # 
        pages: string[]! # 
        title: string! # 
ChanceCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        chance: Expression?1.0 # 
        else: EffectList? # 
        otherwise: EffectList? # 
ChangeHeroEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        broadcast: boolean?true # 
        description: string? # 
        duration: Duration?0.0 # 
        heroName: string?erased # 
        permanent: boolean?true # 
ChatLanguageSettings: object? # 
    properties: 
        currentHero: string? # 
        gainedHero: string? # 
        heroCommandCooldown: string? # 
        invalidCommandMessage: string? # 
        invalidHeroMessage: string? # 
        invalidPlayerMessage: string? # 
        invalidRerollGroupMessage: string? # 
        noPermission: string? # 
ClimbData: object? # 
    properties: 
        blocks: Material[]?[] # 
        climbSpeed: number?0.2 # 
        conditions: ConditionListWrapper?{} # 
        debug: boolean?false # 
        proximity: number?0.2 # 
        skill: string? # 
        speed: number?0.2 # 
        whitelist: boolean?true # 
ColorableComponent: object(ignoreUnknowns)? # 
    properties: 
        dyeColor: DyeColor? # 
CommandEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        commands: ExpressiveMessage[]?[] # 
        executor: CommandEffect.Executor?CONSOLE # 
ConditionList: object? # 
    properties: 
        /string/: Condition! # 
ConfigYaml: object? # 
    properties: 
        config_version: string? # 
        defaultHero: Superhero? # 
        disabledWorlds: string[]? # 
        gui: GUISettings? # 
        heroCommand: HeroCommandSettings? # 
        powerOnStart: PowerOnStartSettings? # 
ConsumeSkillData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        hunger: integer?0 # 
        material: Material?DIRT # 
        skill: string? # 
ConvertBlockData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        inputBlocks: Material[]?[] # 
        outputBlock: Material?GOLD_BLOCK # 
        skill: string? # 
ConvertDropsData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        convertMap: {Material: ItemStack}?{} # 
        dropToNewDrop: {Material: ItemStack}?{} # 
        ignoredBlocks: Material[]?[] # 
        ignoreSilkTouch: boolean?false # 
        skill: string? # 
ConvertItemData: object? # 
    properties: 
        chance: number?1 # 
        conditions: ConditionListWrapper?{} # 
        inputItem: ItemStack? # 
        outputItem: ItemStack? # 
        skill: string? # 
CooldownCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        cooldown: Expression?10 # 
        else: EffectList? # 
        otherwise: EffectList? # 
CraftingData: object? # 
    properties: 
        isShaped: true
        conditions: ConditionListWrapper?{} # 
        shaped: ShapedRecipeData! # 
        shapeless: ShapelessRecipeData! # 
        skill: string? # 
CreeperComponent: object(ignoreUnknowns)? # 
    properties: 
        explosionRadius: integer?3 # 
        fuse: integer?30 # 
        ignite: boolean?false # 
        powered: boolean?false # 
CreeperData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        creeper_power: number?1 # 
        creeperPower: number?1 # 
        fuse: Duration?2.0 # 
        skill: string? # 
        slowfall_duration: Duration?7.0 # 
        slowfallDuration: Duration?7.0 # 
        upwards_velocity: number?2.5 # 
        upwardsVelocity: number?2.5 # 
CustomData: object? # 
    properties: 
        conditions: ConditionList! # 
        effects: EffectList! # 
        trigger: TriggerData! # 
CustomSpell: object? # 
    properties: 
        effects: EffectList! # 
DamageData: object? # 
    properties: 
        causes: EntityDamageEvent.DamageCause[]? # 
        conditions: ConditionList?{} # 
        damageCauses: EntityDamageEvent.DamageCause[]? # 
        type: string! # 
DamageEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        damage: Expression?5 # 
        damageCause: EntityDamageEvent.DamageCause?CUSTOM # 
        shouldTriggerEvents: boolean?false # 
DamageModifierData: object? # 
    properties: 
        causes: EntityDamageEvent.DamageCause[]?[] # 
        conditions: ConditionListWrapper?{} # 
        eased: boolean?false # 
        entities: EntityType[]?[] # 
        expectedMaxDamage: number?30 # 
        incoming: boolean?false # 
        limitProjectiles: boolean?true # 
        maxDamage: number?15 # 
        minDamage: number?0 # 
        outgoing: boolean?false # 
        priority: integer?0 # 
        skill: string? # 
        whitelist: boolean?false # 
DamagePotionData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        damageCause: EntityDamageEvent.DamageCause[]?[] # 
        damageCauses: EntityDamageEvent.DamageCause[]?[] # 
        skill: string? # 
DamageResistanceData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        damageCause: EntityDamageEvent.DamageCause[]? # 
        damageCauses: EntityDamageEvent.DamageCause[]? # 
        damageMultiplier: number?0 # 
        skill: string? # 
DatabaseSettings: object? # 
    properties: 
        host: string?this needs filling with your host name if using mysql # 
        name: string?this needs filling with the database name if using mysql # 
        password: string?this needs filling with the password being used to connect # 
        port: integer?3306 # 
        type: string?YAML # 
        username: string?this needs filling with the username of the account being used to connect # 
DatabaseYaml: object? # 
    properties: 
        config_version: string? # 
        database: DatabaseSettings? # 
DecoyData: object? # 
    properties: 
        base64Skin: string?SELF # 
        base64skin: string?SELF # 
        color: Color? # 
        conditions: ConditionListWrapper?{} # 
        skill: string? # 
DisguiseEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        enable: boolean? # 
        entity: EntityType! # 
        entityType: EntityType! # 
DistanceCondition: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - LOCATION
      - OTHER

        distance: RangeData?-Infinity - Infinity # 
        else: EffectList? # 
        otherwise: EffectList? # 
DroppedItemComponent: object(ignoreUnknowns)? # 
    properties: 
        stackData: ItemStackData? # 
Duration: object? # 
    properties: 
        duration: number! # 
Ears: object? # 
    properties: 
        frequency: number?0.05 # 
        height: number?0.2 # 
        size: number?1 # 
        spread: number?0.2 # 
EffectData: object? # 
    properties: 
        name: string? # 
        particles: ParticleData[]?[] # 
EffectList: object? # 
    properties: 
        /string/: Effect! # 
EggLayerData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        skill: string? # 
        tickDelay: Duration?15.0 # 
EnchantComparisonData: object? # 
    properties: 
        enchantMap: {Enchantment: RangeData}?{} # 
EntityWhitelistCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        entities: Set?[] # 
        otherwise: EffectList? # 
        whitelist: boolean?true # 
EquipableData: object? # 
    properties: 
        amount: integer?1 # 
        droprate: number?0.1 # 
        metadata: ItemMetaData? # 
        quantity: integer?1 # 
        type: Material?STONE # 
EquipmentData: object? # 
    properties: 
        boots: EquipableData? # 
        chest: EquipableData? # 
        chestplate: EquipableData? # 
        feet: EquipableData? # 
        hand: EquipableData? # 
        head: EquipableData? # 
        helmet: EquipableData? # 
        leggings: EquipableData? # 
        legs: EquipableData? # 
        mainhand: EquipableData? # 
        offhand: EquipableData? # 
EraserData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        duration: Duration?7.5 # 
        range: number?30 # 
        removedMessage: string?<player> has had their power erased temporarily! # 
        returnedMessage: string?<player> has had their power reinstated! # 
        skill: string? # 
ExperienceOrbComponent: object(ignoreUnknowns)? # 
    properties: 
        experience: integer?1 # 
ExplosiveComponent: object(ignoreUnknowns)? # 
    properties: 
        isIncendiary: boolean?false # 
        yield: number? # 
ExpressiveMessage: object? # 
    properties: 
        message: string! # 
FairyWings: object? # 
    properties: 
        frequency: number?0.05 # 
        height: number?1 # 
        size: number?1 # 
FallingBlockComponent: object(ignoreUnknowns)? # 
    properties: 
        blockData: BlockData? # undocumented#
        cancelDrop: boolean?false # 
        damagePerBlock: number?2 # 
        dropItem: boolean?true # 
        hurtEntities: boolean?false # 
        maxDamage: integer?40 # 
FlyEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        fly: boolean?true # 
GiveItemData: object? # 
    properties: 
        canDrop: boolean?true # 
        canDropOnDeath: boolean?true # 
        canLoseOnDeath: boolean?true # 
        canStore: boolean?true # 
        conditions: ConditionListWrapper?{} # 
        dropsOnDeath: boolean?true # 
        item: ItemStack? # 
        loseItemOnHeroLoss: boolean?true # 
        skill: string? # 
GiveItemEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        dropIfFull: boolean?true # 
        item: ItemStack! # 
GlidingCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        glide: boolean?true # 
        otherwise: EffectList? # 
        shouldGlide: boolean?true # 
GlidingEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        glide: boolean?true # 
GlobalRerollSettings: object? # 
    properties: 
        eachHeroRequiresPermission: boolean? # 
        itemCooldown: number? # 
        itemEnabled: boolean?true # 
GUILanguageSettings: object? # 
    properties: 
        name: string?Pick your hero! # 
GUISettings: object? # 
    properties: 
        canClose: boolean! # 
        closeable: boolean! # 
        onStart: boolean! # 
        startsOpen: boolean! # 
GunData: object? # 
    properties: 
        bulletSize: number?1.0 # 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        damage: number?5.0 # 
        hitParticle: ParticleData? # 
        item: ItemComparisonData?{} # 
        maxDistance: number?64 # 
        shootSound: SoundData? # 
        skill: string? # 
        trailParticle: ParticleData? # 
Halo: object? # 
    properties: 
        height: number?0.3 # 
        radius: number?0.3 # 
        resolution: number?32 # 
HealthCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        healthPercentage: RangeData?-Infinity - Infinity # 
        otherwise: EffectList? # 
Heart: object? # 
    properties: 
        frequency: number?0.05 # 
        height: number?2 # 
        size: number?1 # 
HeartStealData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        entities: EntityType[]?[] # 
        heartsGained: integer?2 # 
        heartsgained: integer?2 # 
        maxHearts: integer?24 # 
        maxhearts: integer?24 # 
        skill: string? # 
HeightCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        height: RangeData?-Infinity - Infinity # 
        otherwise: EffectList? # 
Helix: object? # 
    properties: 
        height: number?2 # 
        interval: number?0.05 # 
        radius: number?0.5 # 
        speed: number?1 # 
        wave_frequency: number?1 # 
        waveFrequency: number?1 # 
HeroCommandSettings: object? # 
    properties: 
        aliases: string[]? # 
        cooldown: number? # 
HorseComponent: object(ignoreUnknowns)? # 
    properties: 
        armor: ItemStack? # 
        color: Horse.Color?CHESTNUT # 
        hasChest: boolean?false # 
        hasSaddle: boolean?false # 
        jumpStrength: number?0.7 # 
        style: Horse.Style?NONE # 
        tamed: boolean?false # 
        tamingDifficulty: integer?1 # 
HotbarSlotCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - SELF

        else: EffectList? # 
        otherwise: EffectList? # 
        slot: RangeData? # 
IgniteEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        fireTicks: Expression? # 
InBlockCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        blocks: Material[]?[] # 
        else: EffectList? # 
        otherwise: EffectList? # 
InstantBreakData: object? # 
    properties: 
        blocks: Material[]?[] # 
        breakUsing: Material? # 
        breakusing: Material? # 
        conditions: ConditionListWrapper?{} # 
        instantBreakable: Material[]?[] # 
        skill: string? # 
InteractData: object? # 
    properties: 
        actions: Action[]? # 
        conditions: ConditionList?{} # 
        type: string! # 
ItemComparisonData: object? # 
    properties: 
        amount: RangeData?-Infinity - Infinity # 
        metadata: ItemMetaComparisonData? # 
        type: Material? # 
        types: Material[]?[] # 
ItemCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - ITEM
      - OTHER
      - SELF

        else: EffectList? # 
        item: ItemComparisonData! # 
        itemComparison: ItemComparisonData! # 
        otherwise: EffectList? # 
        slot: InventorySlot?HAND # 
ItemMaterialEffect: object? # 
    properties: 
        mode: enum!ITEM # 
    values: 
      - ALL
      - ITEM

        material: Material? # 
ItemMetaComparisonData: object? # 
    properties: 
        displayName: string! # 
        enchants: EnchantComparisonData! # 
        lore: LoreData! # 
ItemMetaData: object? # 
    properties: 
        attributes: AttributesData? # 
        book: BookData? # 
        color: LeatherArmorColor? # 
        customModelData: integer?0 # 
        displayName: string? # 
        durability: integer?0 # 
        enchantments: {Enchantment: integer}?{} # 
        flags: ItemFlag[]?[] # 
        isUnbreakable: boolean?false # 
        lore: string[]? # 
        trim: TrimData? # 
ItemStackData: object? # 
    properties: 
        amount: integer?1 # 
        metadata: ItemMetaData? # 
        quantity: integer?1 # 
        type: Material?STONE # 
ItemStackWrapperEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        effects: EffectList?{} # 
        equipmentSlot: InventorySlot?HAND # 
        slot: InventorySlot?HAND # 
ItemWrapperCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        else: EffectList? # 
        otherwise: EffectList? # 
        slot: InventorySlot?HAND # 
KillPotionData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        entities: EntityType[]? # 
        skill: string? # 
KnockbackEffect: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - OTHER

        multiplier: Expression?1.0 # 
        overwriteCurrentVelocity: boolean?true # 
LanguageYaml: object? # 
    properties: 
        Chat: ChatLanguageSettings? # 
        chatLanguageSettings: ChatLanguageSettings? # 
        config_version: string? # 
        GUI: GUILanguageSettings? # 
        guiLanguageSettings: GUILanguageSettings? # 
LaunchEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        entity: EntityData?{ type: "FIREBALL"} # 
        velocity: Expression?1.0 # 
LaunchProjectileSpell: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?1 # 
        cooldownMessage: string?<spellName> has <currentcooldown> seconds remaining. # 
        cost: integer?1 # 
        displayName: string?<purple><spellName> # 
        displayNameFormat: string?<purple><spellName> # 
        fuel: Material?REDSTONE # 
        lore: string[]?[] # 
        loreFormat: string[]?[] # 
        moreFuelMessage: string?This spell needs <fuelneeded> more <fuel> # 
        projectile: EntityData?{} # 
        skill: string? # 
        spellName: string? # undocumented#
LeatherArmorColor: object? # 
    properties: 
        blue: integer?-1 # 
        green: integer?-1 # 
        red: integer?-1 # 
LifestealData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        lifestealPercentage: number?5 # 
        lifestealpercentage: number?5 # 
        skill: string? # 
LightCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        checkBlockLight: boolean?true # 
        checkBlocks: boolean?true # 
        checkNatural: boolean?true # 
        checkNaturalLight: boolean?true # 
        else: EffectList? # 
        light: RangeData?-Infinity - Infinity # 
        lightRange: RangeData?-Infinity - Infinity # 
        otherwise: EffectList? # 
LightningEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        fake: boolean?false # 
LivingEntityComponent: object(ignoreUnknowns)? # 
    properties: 
        canEquip: boolean?false # 
        equipment: EquipmentData? # 
LlamaComponent: object(ignoreUnknowns)? # 
    properties: 
        color: Llama.Color? # 
        strength: integer?1 # 
LocationCubeEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        effects: EffectList?{} # 
        horizontalRadius: integer?0 # 
        offset: Vector?{ x: 0, y: 0, z: 0 } # 
        verticalRadius: integer?0 # 
LocationOffsetEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        effects: EffectList?{} # 
        offset: Vector?{ x: 0, y: 0, z: 0 } # 
LoopData: object? # 
    properties: 
        conditions: ConditionList?{} # 
        period: Duration?1.0 # 
        type: string! # 
LungeEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        horizontalVelocity: Expression?0 # 
        overwrite: boolean?true # 
        verticalVelocity: Expression?0 # 
MessageEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        message: ExpressiveMessage? # 
MetadataCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        comparison: ComparisonCondition.Comparison?EQUAL # 
        else: EffectList? # 
        otherwise: EffectList? # 
        value: Expression! # 
        variable: string! # 
MetadataEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        operation: ModifyEffect.Operation?SET # 
        value: Expression?1 # 
        variable: string! # 
NearestEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        effects: EffectList?{} # 
        radius: number?5 # 
NoHungerData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        minimumHunger: number?19 # 
        skill: string? # 
NOTCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - ITEM
      - LOCATION
      - OTHER
      - SELF

        condition: Condition? # 
        else: EffectList? # 
        otherwise: EffectList? # 
NPCCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        isNPC: boolean?true # 
        npc: boolean?true # 
        otherwise: EffectList? # 
OHKOData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        displayName: string? # 
        displayname: string? # 
        entityTypes: EntityType[]? # 
        entitytypes: EntityType[]? # 
        skill: string? # 
OnGroundCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        grounded: boolean?true # 
        isGrounded: boolean?true # 
        otherwise: EffectList? # 
OptionsData: object? # 
    properties: 
        colours: Color[]?[] # 
        scale: number?1.0 # 
ORCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - ITEM
      - LOCATION
      - OTHER
      - SELF

        conditions: ConditionList? # 
        else: EffectList? # 
        otherwise: EffectList? # 
ParticleData: object? # 
    properties: 
        amount: integer?1 # 
        duration: number?2.5 # 
        extra: number?0 # 
        numberOfParticles: integer?1 # 
        options: OptionsData? # 
        particle: Particle?PORTAL # 
        shape: Shape? # undocumented#
ParticleEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        particleData: ParticleData! # 
PhaseData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        minimumPhaseYAxis: number?5 # 
        skill: string? # 
PickpocketData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        isSneaking: boolean?true # 
        range: number?3 # 
        skill: string? # 
        sneaking: boolean?true # 
PlaceBlockEffect: object? # 
    properties: 
        mode: enum!LOCATION # 
    values: 
      - ALL
      - LOCATION

        block: BlockData! # 
        blockData: BlockData! # 
        isPacket: boolean?false # 
        revertConditions: ConditionList?{} # 
        revertsAfter: Expression?-1 # 
        updatePhysics: boolean?true # 
PlaceBlockSpell: object? # 
    properties: 
        block: BlockData? # 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?1 # 
        cooldownMessage: string?<spellName> has <currentcooldown> seconds remaining. # 
        cost: integer?1 # 
        displayName: string?<purple><spellName> # 
        displayNameFormat: string?<purple><spellName> # 
        fuel: Material?REDSTONE # 
        lore: string[]?[] # 
        loreFormat: string[]?[] # 
        moreFuelMessage: string?This spell needs <fuelneeded> more <fuel> # 
        skill: string? # 
        spellName: string? # undocumented#
PlayTrackEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        song: Song? # 
        track: Song? # 
Point: object? # 
    properties: 
        offset: number?0 # 
        spread: number?0 # 
        yOffset: number?0 # 
Potion: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        potion: PotionEffectData? # 
        potionEffect: PotionEffectData? # 
PotionEffectCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        duration: RangeData?-Infinity - Infinity # 
        effect: PotionEffectType! # 
        else: EffectList? # 
        otherwise: EffectList? # 
        potency: RangeData?-Infinity - Infinity # 
PotionEffectData: object? # 
    properties: 
        ambient: boolean?true # 
        duration: number?5 # 
        hasParticles: boolean?true # 
        potency: integer?0 # 
        type: PotionEffectType! # 
PotionEffectTriggerData: object? # 
    properties: 
        actions: EntityPotionEffectEvent.Action[]? # 
        causes: EntityPotionEffectEvent.Cause[]? # 
        conditions: ConditionList?{} # 
        type: string! # 
        types: PotionEffectType[]?[] # 
PotionEntityComponent: object(ignoreUnknowns)? # 
    properties: 
        potion: ItemStack?SPLASH_POTION # 
PotionGifterSkillData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?10 # 
        cooldownMessage: string?<grey><i>You have <currentcooldown> seconds left until it can be used again! # 
        giverMessage: string?<grey><i>You gave them a potion effect. # 
        receiverMessage: string?<grey><i>You have received a potion effect. # 
        skill: string? # 
PotionMetaData: object? # 
    properties: 
        extended: boolean?false # 
        type: PotionType?SWIFTNESS # 
        upgraded: boolean?false # 
PowerOnStartSettings: object? # 
    properties: 
        enabled: boolean! # 
        firstJoinTitle: boolean! # 
        isEnabled: boolean! # 
        showHero: boolean! # 
PrimedTntComponent: object(ignoreUnknowns)? # 
    properties: 
        fuseTicks: integer?100 # 
ProjectileData: object? # 
    properties: 
        conditions: ConditionList?{} # 
        onlyProjectiles: boolean?false # 
        type: string! # 
ProjectileEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        projectile: EntityData?{ type: "SNOWBALL"} # 
        velocity: number?1.0 # 
RabbitComponent: object(ignoreUnknowns)? # 
    properties: 
        variant: Rabbit.Type? # 
RandomTeleportEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        maxDistance: number?10 # 
        minDistance: number?5 # 
RaytraceEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        alwaysHit: boolean?true # 
        collisionMode: FluidCollisionMode?NEVER # 
        conditions: ConditionList?{} # 
        effects: EffectList?{} # 
        ignorePassables: boolean?true # 
        maxDistance: number?10 # 
        raySize: number?1.0 # 
        raysize: number?1.0 # 
RemoteDetonationData: object? # 
    properties: 
        breakBlocks: boolean?true # 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        explodable: EntityType[]?[] # 
        explosionStrength: number?1 # 
        removeDetonatedEntity: boolean?true # 
        skill: string? # 
        spawnsFire: boolean?false # 
RemovePotionEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        types: PotionEffectType[]?[] # 
RepulseEffect: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - OTHER

        add: boolean?false # 
        velocity: number?1.0 # 
RepulsionData: object? # 
    properties: 
        blacklist: Set?[] # 
        conditions: ConditionListWrapper?{} # 
        entityBlacklist: Set?[] # 
        multiplier: number?1 # 
        radius: number?5.0 # 
        skill: string? # 
RerollConfig: object? # 
    properties: 
        config_version: string? # 
        configVersion: string? # 
        global_reroll_settings: GlobalRerollSettings? # default#
        globalRerollSettings: GlobalRerollSettings? # default#
        reroll_groups: RerollGroup{}?{} # 
        rerollGroups: RerollGroup{}?{} # 
RerollGroup: object? # 
    properties: 
        heroes: RerollGroup.WeightedHero[]?[] # 
        item: ItemComparisonData? # 
        itemComparator: ItemComparisonData? # 
        weightedHeroes: RerollGroup.WeightedHero[]?[] # 
RerollGroup.WeightedHero: object? # 
    properties: 
        hero: string! # 
        weight: integer! # 
ResizeEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        operation: ModifyEffect.Operation?SET # 
        retainHealth: boolean?true # 
        value: Expression?1 # 
SetData: object? # 
    properties: 
        set: Set! # 
ShapedRecipeData: object? # 
    properties: 
        recipe: string[]![] # 
        recipeKeys: {Material: string}!{} # 
        result: ItemStack! # 
        unique_key: string! # 
        uniqueKey: string! # 
ShapelessRecipeData: object? # 
    properties: 
        ingredients: {Material: integer}!{} # 
        result: ItemStack! # 
        unique_key: string! # 
        uniqueKey: string! # 
ShieldData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        cooldown: Duration?100.0 # 
        skill: string? # 
ShooterEffect: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - OTHER

        conditions: ConditionList?{} # 
        effects: EffectList?{} # 
        onlyProjectiles: boolean?true # 
SizeComponent: object(ignoreUnknowns)? # 
    properties: 
        size: integer? # 
SizeCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        otherwise: EffectList? # 
        size: RangeData?-Infinity - Infinity # 
Skill: object? # 
    properties: 
        conditions: ConditionList! # 
        counter: integer?0 # 
        effects: EffectList! # 
        trigger: TriggerData! # 
SkillsContainer: object? # 
    properties: 
        /string/: SkillData! # 
SlamData: object? # 
    properties: 
        airCooldown: number?1 # 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        damage: number?0 # 
        diameterRadius: number?5 # 
        foodCost: integer?0 # 
        hand: ItemStack?AIR # 
        item: ItemStack?AIR # 
        minimumFood: integer?0 # 
        radius: number?5 # 
        skill: string? # 
SlimeData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        skill: string? # 
        speedMultiplier: number?1 # 
SneakCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        otherwise: EffectList? # 
        sneak: boolean?true # 
SneakData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        mustSneak: boolean? # 
        needsInvisibility: boolean? # 
        skill: string? # 
        sneak: boolean? # 
SoundData: object? # 
    properties: 
        pitch: number?1.0 # 
        sound: Sound?ENTITY_GENERIC_EXPLODE # 
        volume: number?1.0 # 
SoundEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        sound: SoundData? # 
SpawnEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        entity: EntityData?{ type: "ZOMBIE"} # 
SpectralArrowComponent: object(ignoreUnknowns)? # 
    properties: 
        critical: boolean?false # 
        damage: number?2.0 # 
        glowingTicks: integer?200 # 
        knockbackStrength: integer?0 # 
        pickupStatus: AbstractArrow.PickupStatus?DISALLOWED # 
        pierceLevel: integer?0 # 
SpeedCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        else: EffectList? # 
        otherwise: EffectList? # 
        speed: RangeData? # 
        speedRange: RangeData? # 
StrongmanData: object? # 
    properties: 
        conditions: ConditionListWrapper?{} # 
        maxPassengers: integer?10 # 
        maxpassengers: integer?10 # 
        skill: string? # 
        tooMuscularMessage: string?<player> <white> is too strong to sit in a vehicle! # 
        toomuscularmessage: string?<player> <white> is too strong to sit in a vehicle! # 
        upwardsVelocity: number?1 # 
        upwardsvelocity: number?1 # 
        velocity: number?2.5 # 
SummonSkillData: object? # 
    properties: 
        action: Set? # undocumented#
        conditions: ConditionListWrapper?{} # 
        cooldown: number?10.0 # 
        cooldownMessage: string?<yellow><bold>Zeus <white>Cooldown: <s> seconds # 
        entity: EntityType?LIGHTNING_BOLT # 
        entityType: EntityType?LIGHTNING_BOLT # 
        mustSneak: boolean?true # 
        mustsneak: boolean?true # 
        range: integer?10 # 
        repel: boolean?false # 
        skill: string? # 
        sneak: boolean?true # 
Superhero: object(ignoreUnknowns)? # 
    properties: 
        colouredName: string? # 
        description: string? # 
        heroGainedSound: SoundData? # 
        icon: ItemStack? # 
        name: string? # 
        plusUltraSkills: PlusUltraSkillsContainer?{} # 
        skills: SkillsContainer?{} # 
        skin: Skin? # 
SuperheroCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        heroes: string[]?[] # 
TamedCondition: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - OTHER

        checkOwner: boolean?true # 
        else: EffectList? # 
        otherwise: EffectList? # 
TeleportData: object? # 
    properties: 
        action: Set? # undocumented#
        actions: Set? # undocumented#
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        distance: integer?30 # 
        particle: ParticleData? # 
        skill: string? # 
        teleportCause: PlayerTeleportEvent.TeleportCause?ENDER_PEARL # 
        teleportItem: ItemComparisonData? # undocumented#
        yAxisMultiplier: number?1 # 
TemperatureCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        else: EffectList? # 
        otherwise: EffectList? # 
        temperature: RangeData? # 
        temperatureRange: RangeData? # 
ThrowableProjectileComponent: object(ignoreUnknowns)? # 
    properties: 
        itemStackData: ItemStackData? # 
ThrowerData: object? # 
    properties: 
        actions: Action[]? # undocumented#
        ammo: ItemComparisonData?{} # 
        ammoCost: integer?1 # 
        canPickUp: boolean?false # 
        conditions: ConditionListWrapper?{} # 
        cooldown: number?0 # 
        cooldownMessage: string?You have <currentcooldown> seconds remaining before you can use the ability again! # 
        damage: number?3 # 
        item: ItemComparisonData?{} # 
        projectile: EntityType?SNOWBALL # 
        skill: string? # 
        velocity: number?1.4 # 
TimeCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - SELF

        else: EffectList? # 
        otherwise: EffectList? # 
        time: RangeData?-Infinity - Infinity # 
TimerEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - ITEM
      - LOCATION
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        delay: Duration?1.0 # 
        effects: EffectList?{} # 
        numberOfRepeats: integer?1 # 
        period: Duration?1.0 # 
        repeats: integer?1 # 
        ticksDelay: Duration?1.0 # 
TransmutationSpell: object? # 
    properties: 
        block: BlockData? # undocumented#
        conditions: ConditionListWrapper?{} # 
        cooldown: number?1 # 
        cooldownMessage: string?<spellName> has <currentcooldown> seconds remaining. # 
        cost: integer?1 # 
        displayName: string?<purple><spellName> # 
        displayNameFormat: string?<purple><spellName> # 
        fuel: Material?REDSTONE # 
        lore: string[]?[] # 
        loreFormat: string[]?[] # 
        moreFuelMessage: string?This spell needs <fuelneeded> more <fuel> # 
        resultantBlock: BlockData? # undocumented#
        skill: string? # 
        spellName: string? # undocumented#
        transmutableBlocks: Material[]?[] # 
VeinMinerEffect: object? # 
    properties: 
        mode: enum!LOCATION # 
    values: 
      - ALL
      - LOCATION

        allowMultiTypeVein: boolean?false # 
        delay: Duration?0.05 # 
        limit: integer?10 # 
        materials: Material[]?[] # 
        types: Material[]?[] # 
VelocityEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - OTHER
      - SELF

        component: string?Y # 
        operation: ModifyEffect.Operation?SET # 
        value: Expression?1 # 
VisibilityCondition: object? # 
    properties: 
        mode: enum!OTHER # 
    values: 
      - ALL
      - OTHER

        distance: number?16 # 
        else: EffectList? # 
        maxDistance: number?16 # 
        otherwise: EffectList? # 
WaitEffect: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - ITEM
      - LOCATION
      - OTHER
      - SELF

        conditions: ConditionList?{} # 
        delay: Duration?20.0 # 
        effects: EffectList?{} # 
        ticksDelay: Duration?20.0 # 
WalkerData: object? # 
    properties: 
        aboveFloor: boolean?false # 
        blocksDrop: boolean?true # 
        blocksToPlace: Material[]?[] # 
        blocksToPlaceOn: Material[]?[] # 
        blocksToReplace: Set?[] # 
        canPlaceFloating: boolean?true # 
        conditions: ConditionListWrapper?{} # 
        isSneaking: boolean?false # 
        issneaking: boolean?false # 
        revertsAfter: Duration?15.0 # 
        shouldRevert: boolean?false # 
        skill: string? # 
        sneaking: boolean?false # 
WeatherDamageData: object? # 
    properties: 
        checkShelter: boolean?true # 
        conditions: ConditionListWrapper?{} # 
        damage: number?1.0 # 
        skill: string? # 
Wisp: object? # 
    properties: 
        height: number?2 # 
        radius: number?0.5 # 
        speed: number?1 # 
        wave_frequency: number?1 # 
        waveFrequency: number?1 # 
WitherSkullComponent: object(ignoreUnknowns)? # 
    properties: 
        isCharged: boolean?false # 
WolfComponent: object(ignoreUnknowns)? # 
    properties: 
        angry: boolean?false # 
WorldCondition: object? # 
    properties: 
        mode: enum!SELF # 
    values: 
      - ALL
      - LOCATION
      - OTHER
      - SELF

        else: EffectList? # 
        otherwise: EffectList? # 
        worlds: string[]?[] # 
ZombifiableComponent: object(ignoreUnknowns)? # 
    properties: 
        immuneToZombification: boolean?false # 
AbstractArrow.PickupStatus: enum? # 
    values: 
      - ALLOWED
      - CREATIVE_ONLY
      - DISALLOWED
AbstractHorse: enum! # 
    values: 
      - CAMEL
      - DONKEY
      - HORSE
      - LLAMA
      - MULE
      - SKELETON_HORSE
      - TRADER_LLAMA
      - ZOMBIE_HORSE
Action: enum? # 
    values: 
      - LEFT_CLICK_AIR
      - LEFT_CLICK_BLOCK
      - PHYSICAL
      - RIGHT_CLICK_AIR
      - RIGHT_CLICK_BLOCK
Ageable: enum! # 
    values: 
      - ARMADILLO
      - AXOLOTL
      - BEE
      - CAMEL
      - CAT
      - CHICKEN
      - COW
      - DOLPHIN
      - DONKEY
      - DROWNED
      - FOX
      - FROG
      - GLOW_SQUID
      - GOAT
      - HOGLIN
      - HORSE
      - HUSK
      - LLAMA
      - MOOSHROOM
      - MULE
      - OCELOT
      - PANDA
      - PARROT
      - PIG
      - PIGLIN
      - PIGLIN_BRUTE
      - POLAR_BEAR
      - RABBIT
      - SHEEP
      - SKELETON_HORSE
      - SNIFFER
      - SQUID
      - STRIDER
      - TRADER_LLAMA
      - TURTLE
      - VILLAGER
      - WANDERING_TRADER
      - WOLF
      - ZOGLIN
      - ZOMBIE
      - ZOMBIE_HORSE
      - ZOMBIE_VILLAGER
      - ZOMBIFIED_PIGLIN
Arrow: enum! # 
    values: 
      - ARROW
Attribute: enum! # 
    values: 
      - armor
      - armor_toughness
      - attack_damage
      - attack_knockback
      - attack_speed
      - block_break_speed
      - block_interaction_range
      - burning_time
      - entity_interaction_range
      - explosion_knockback_resistance
      - fall_damage_multiplier
      - flying_speed
      - follow_range
      - gravity
      - jump_strength
      - knockback_resistance
      - luck
      - max_absorption
      - max_health
      - mining_efficiency
      - movement_efficiency
      - movement_speed
      - oxygen_bonus
      - safe_fall_distance
      - scale
      - sneaking_speed
      - spawn_reinforcements
      - step_height
      - submerged_mining_speed
      - sweeping_damage_ratio
      - tempt_range
      - water_movement_efficiency
AttributesData.Operation: enum? # 
    values: 
      - ADD_NUMBER
      - ADD_SCALAR
      - MULTIPLY_SCALAR
      - MULTIPLY_SCALAR_1
Axolotl: enum! # 
    values: 
      - AXOLOTL
Axolotl.Variant: enum? # 
    values: 
      - BLUE
      - CYAN
      - GOLD
      - LUCY
      - WILD
Biome: enum! # 
    values: 
      - BADLANDS
      - BAMBOO_JUNGLE
      - BASALT_DELTAS
      - BEACH
      - BIRCH_FOREST
      - CHERRY_GROVE
      - COLD_OCEAN
      - CRIMSON_FOREST
      - DARK_FOREST
      - DEEP_COLD_OCEAN
      - DEEP_DARK
      - DEEP_FROZEN_OCEAN
      - DEEP_LUKEWARM_OCEAN
      - DEEP_OCEAN
      - DESERT
      - DRIPSTONE_CAVES
      - END_BARRENS
      - END_HIGHLANDS
      - END_MIDLANDS
      - ERODED_BADLANDS
      - FLOWER_FOREST
      - FOREST
      - FROZEN_OCEAN
      - FROZEN_PEAKS
      - FROZEN_RIVER
      - GROVE
      - ICE_SPIKES
      - JAGGED_PEAKS
      - JUNGLE
      - LUKEWARM_OCEAN
      - LUSH_CAVES
      - MANGROVE_SWAMP
      - MEADOW
      - MUSHROOM_FIELDS
      - NETHER_WASTES
      - OCEAN
      - OLD_GROWTH_BIRCH_FOREST
      - OLD_GROWTH_PINE_TAIGA
      - OLD_GROWTH_SPRUCE_TAIGA
      - PALE_GARDEN
      - PLAINS
      - RIVER
      - SAVANNA
      - SAVANNA_PLATEAU
      - SMALL_END_ISLANDS
      - SNOWY_BEACH
      - SNOWY_PLAINS
      - SNOWY_SLOPES
      - SNOWY_TAIGA
      - SOUL_SAND_VALLEY
      - SPARSE_JUNGLE
      - STONY_PEAKS
      - STONY_SHORE
      - SUNFLOWER_PLAINS
      - SWAMP
      - TAIGA
      - THE_END
      - THE_VOID
      - WARM_OCEAN
      - WARPED_FOREST
      - WINDSWEPT_FOREST
      - WINDSWEPT_GRAVELLY_HILLS
      - WINDSWEPT_HILLS
      - WINDSWEPT_SAVANNA
      - WOODED_BADLANDS
BlockFace: enum? # 
    values: 
      - DOWN
      - EAST
      - EAST_NORTH_EAST
      - EAST_SOUTH_EAST
      - NORTH
      - NORTH_EAST
      - NORTH_NORTH_EAST
      - NORTH_NORTH_WEST
      - NORTH_WEST
      - SELF
      - SOUTH
      - SOUTH_EAST
      - SOUTH_SOUTH_EAST
      - SOUTH_SOUTH_WEST
      - SOUTH_WEST
      - UP
      - WEST
      - WEST_NORTH_WEST
      - WEST_SOUTH_WEST
BlockRayMode: enum? # 
    values: 
      - ABOVEBLOCK
      - CLOSERBLOCK
      - THEBLOCK
Colorable: enum! # 
    values: 
      - SHEEP
      - SHULKER
CommandEffect.Executor: enum? # 
    values: 
      - CONSOLE
      - PLAYER
ComparisonCondition.Comparison: enum! # 
    values: 
      - EQUAL
      - GREATER
      - GREATEREQUAL
      - LESS
      - LESSEQUAL
Creeper: enum! # 
    values: 
      - CREEPER
DyeColor: enum? # 
    values: 
      - BLACK
      - BLUE
      - BROWN
      - CYAN
      - GRAY
      - GREEN
      - LIGHT_BLUE
      - LIGHT_GRAY
      - LIME
      - MAGENTA
      - ORANGE
      - PINK
      - PURPLE
      - RED
      - WHITE
      - YELLOW
Enchantment: enum! # 
    values: 
      - aqua_affinity
      - bane_of_arthropods
      - binding_curse
      - blast_protection
      - breach
      - channeling
      - density
      - depth_strider
      - efficiency
      - feather_falling
      - fire_aspect
      - fire_protection
      - flame
      - fortune
      - frost_walker
      - impaling
      - infinity
      - knockback
      - looting
      - loyalty
      - luck_of_the_sea
      - lure
      - mending
      - multishot
      - piercing
      - power
      - projectile_protection
      - protection
      - punch
      - quick_charge
      - respiration
      - riptide
      - sharpness
      - silk_touch
      - smite
      - soul_speed
      - sweeping_edge
      - swift_sneak
      - thorns
      - unbreaking
      - vanishing_curse
      - wind_burst
EntityDamageEvent.DamageCause: enum? # 
    values: 
      - BLOCK_EXPLOSION
      - CAMPFIRE
      - CONTACT
      - CRAMMING
      - CUSTOM
      - DRAGON_BREATH
      - DROWNING
      - DRYOUT
      - ENTITY_ATTACK
      - ENTITY_EXPLOSION
      - ENTITY_SWEEP_ATTACK
      - FALL
      - FALLING_BLOCK
      - FIRE
      - FIRE_TICK
      - FLY_INTO_WALL
      - FREEZE
      - HOT_FLOOR
      - KILL
      - LAVA
      - LIGHTNING
      - MAGIC
      - MELTING
      - POISON
      - PROJECTILE
      - SONIC_BOOM
      - STARVATION
      - SUFFOCATION
      - SUICIDE
      - THORNS
      - VOID
      - WITHER
      - WORLD_BORDER
EntityPotionEffectEvent.Action: enum? # 
    values: 
      - ADDED
      - CHANGED
      - CLEARED
      - REMOVED
EntityPotionEffectEvent.Cause: enum? # 
    values: 
      - AREA_EFFECT_CLOUD
      - ARROW
      - ATTACK
      - AXOLOTL
      - BEACON
      - COMMAND
      - CONDUIT
      - CONVERSION
      - DEATH
      - DOLPHIN
      - EXPIRATION
      - FOOD
      - ILLUSION
      - MILK
      - PATROL_CAPTAIN
      - PLUGIN
      - POTION_DRINK
      - POTION_SPLASH
      - SPIDER_SPAWN
      - TOTEM
      - TURTLE_HELMET
      - UNKNOWN
      - VILLAGER_TRADE
      - WARDEN
      - WITHER_ROSE
EntityType: enum! # ExperienceOrb: enum! # 
    values: 
      - EXPERIENCE_ORB
Explosive: enum! # 
    values: 
      - BREEZE_WIND_CHARGE
      - DRAGON_FIREBALL
      - FIREBALL
      - SMALL_FIREBALL
      - TNT
      - TNT_MINECART
      - WIND_CHARGE
      - WITHER_SKULL
FallingBlock: enum! # 
    values: 
      - FALLING_BLOCK
FluidCollisionMode: enum? # 
    values: 
      - ALWAYS
      - NEVER
      - SOURCE_ONLY
Hoglin: enum! # 
    values: 
      - HOGLIN
Horse.Color: enum? # 
    values: 
      - BLACK
      - BROWN
      - CHESTNUT
      - CREAMY
      - DARK_BROWN
      - GRAY
      - WHITE
Horse.Style: enum? # 
    values: 
      - BLACK_DOTS
      - NONE
      - WHITE
      - WHITEFIELD
      - WHITE_DOTS
Item: enum! # 
    values: 
      - ITEM
ItemFlag: enum? # 
    values: 
      - HIDE_ADDITIONAL_TOOLTIP
      - HIDE_ARMOR_TRIM
      - HIDE_ATTRIBUTES
      - HIDE_DESTROYS
      - HIDE_DYE
      - HIDE_ENCHANTS
      - HIDE_PLACED_ON
      - HIDE_UNBREAKABLE
LivingEntity: enum! # 
    values: 
      - ALLAY
      - ARMADILLO
      - ARMOR_STAND
      - AXOLOTL
      - BAT
      - BEE
      - BLAZE
      - BOGGED
      - BREEZE
      - CAMEL
      - CAT
      - CAVE_SPIDER
      - CHICKEN
      - COD
      - COW
      - CREAKING
      - CREEPER
      - DOLPHIN
      - DONKEY
      - DROWNED
      - ELDER_GUARDIAN
      - ENDERMAN
      - ENDERMITE
      - ENDER_DRAGON
      - EVOKER
      - FOX
      - FROG
      - GHAST
      - GIANT
      - GLOW_SQUID
      - GOAT
      - GUARDIAN
      - HOGLIN
      - HORSE
      - HUSK
      - ILLUSIONER
      - IRON_GOLEM
      - LLAMA
      - MAGMA_CUBE
      - MOOSHROOM
      - MULE
      - OCELOT
      - PANDA
      - PARROT
      - PHANTOM
      - PIG
      - PIGLIN
      - PIGLIN_BRUTE
      - PILLAGER
      - PLAYER
      - POLAR_BEAR
      - PUFFERFISH
      - RABBIT
      - RAVAGER
      - SALMON
      - SHEEP
      - SHULKER
      - SILVERFISH
      - SKELETON
      - SKELETON_HORSE
      - SLIME
      - SNIFFER
      - SNOW_GOLEM
      - SPIDER
      - SQUID
      - STRAY
      - STRIDER
      - TADPOLE
      - TRADER_LLAMA
      - TROPICAL_FISH
      - TURTLE
      - VEX
      - VILLAGER
      - VINDICATOR
      - WANDERING_TRADER
      - WARDEN
      - WITCH
      - WITHER
      - WITHER_SKELETON
      - WOLF
      - ZOGLIN
      - ZOMBIE
      - ZOMBIE_HORSE
      - ZOMBIE_VILLAGER
      - ZOMBIFIED_PIGLIN
Llama: enum! # 
    values: 
      - LLAMA
      - TRADER_LLAMA
Llama.Color: enum? # 
    values: 
      - BROWN
      - CREAMY
      - GRAY
      - WHITE
Material: enum! # ModifyEffect.Operation: enum? # 
    values: 
      - ADD
      - DIVIDE
      - MULTIPLY
      - SET
      - SUBTRACT
Particle: enum! # Phantom: enum! # 
    values: 
      - PHANTOM
PiglinAbstract: enum! # 
    values: 
      - PIGLIN
      - PIGLIN_BRUTE
PlayerTeleportEvent.TeleportCause: enum? # 
    values: 
      - CHORUS_FRUIT
      - COMMAND
      - DISMOUNT
      - ENDER_PEARL
      - END_GATEWAY
      - END_PORTAL
      - EXIT_BED
      - NETHER_PORTAL
      - PLUGIN
      - SPECTATE
      - UNKNOWN
PotionEffectType: enum! # 
    values: 
      - absorption
      - bad_omen
      - blindness
      - conduit_power
      - darkness
      - dolphins_grace
      - fire_resistance
      - glowing
      - haste
      - health_boost
      - hero_of_the_village
      - hunger
      - infested
      - instant_damage
      - instant_health
      - invisibility
      - jump_boost
      - levitation
      - luck
      - mining_fatigue
      - nausea
      - night_vision
      - oozing
      - poison
      - raid_omen
      - regeneration
      - resistance
      - saturation
      - slow_falling
      - slowness
      - speed
      - strength
      - trial_omen
      - unluck
      - water_breathing
      - weakness
      - weaving
      - wind_charged
      - wither
PotionType: enum! # 
    values: 
      - awkward
      - fire_resistance
      - harming
      - healing
      - infested
      - invisibility
      - leaping
      - long_fire_resistance
      - long_invisibility
      - long_leaping
      - long_night_vision
      - long_poison
      - long_regeneration
      - long_slow_falling
      - long_slowness
      - long_strength
      - long_swiftness
      - long_turtle_master
      - long_water_breathing
      - long_weakness
      - luck
      - mundane
      - night_vision
      - oozing
      - poison
      - regeneration
      - slow_falling
      - slowness
      - strength
      - strong_harming
      - strong_healing
      - strong_leaping
      - strong_poison
      - strong_regeneration
      - strong_slowness
      - strong_strength
      - strong_swiftness
      - strong_turtle_master
      - swiftness
      - thick
      - turtle_master
      - water
      - water_breathing
      - weakness
      - weaving
      - wind_charged
Rabbit: enum! # 
    values: 
      - RABBIT
Rabbit.Type: enum? # 
    values: 
      - BLACK
      - BLACK_AND_WHITE
      - BROWN
      - GOLD
      - SALT_AND_PEPPER
      - THE_KILLER_BUNNY
      - WHITE
Slime: enum! # 
    values: 
      - MAGMA_CUBE
      - SLIME
Sound: enum! # SpectralArrow: enum! # 
    values: 
      - SPECTRAL_ARROW
ThrowableProjectile: enum! # 
    values: 
      - EGG
      - ENDER_PEARL
      - EXPERIENCE_BOTTLE
      - LINGERING_POTION
      - SNOWBALL
      - SPLASH_POTION
      - TRIDENT
ThrownPotion: enum! # 
    values: 
      - LINGERING_POTION
      - SPLASH_POTION
TNTPrimed: enum! # 
    values: 
      - TNT
Trident: enum! # 
    values: 
      - TRIDENT
TrimMaterial: enum! # 
    values: 
      - amethyst
      - copper
      - diamond
      - emerald
      - gold
      - iron
      - lapis
      - netherite
      - quartz
      - redstone
      - resin
TrimPattern: enum! # 
    values: 
      - bolt
      - coast
      - dune
      - eye
      - flow
      - host
      - raiser
      - rib
      - sentry
      - shaper
      - silence
      - snout
      - spire
      - tide
      - vex
      - ward
      - wayfinder
      - wild
WitherSkull: enum! # 
    values: 
      - WITHER_SKULL
Wolf: enum! # 
    values: 
      - WOLF
ConditionId: null! # ConditionListWrapper: ConditionList! # EffectId: null! # Expression: string! # InventorySlot: EquipmentSlot | integer! # LoreData: string[]! # PlusUltraSkillsContainer: SkillsContainer! # RangeData: string! # 