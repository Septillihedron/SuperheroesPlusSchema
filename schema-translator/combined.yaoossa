Condition: union(unionIdentifier = type)!  # 
    properties: 
        otherwise: EffectList?  #
        else: EffectList?  #
    unions: 
        BIOME: BiomeCondition!  #
        BLOCK: BlockCondition!  #
        CHANCE: ChanceCondition!  #
        COOLDOWN: CooldownCondition!  #
        DISTANCE: DistanceCondition!  #
        ENTITY: EntityWhitelistCondition!  #
        FLY: FlyingCondition!  #
        FLYING: FlyingCondition!  #
        GLIDING: GlidingCondition!  #
        HEALTH: HealthCondition!  #
        HEIGHT: HeightCondition!  #
        HERO: SuperheroCondition!  #
        HOTBARSLOT: HotbarSlotCondition!  #
        INBLOCK: InBlockCondition!  #
        ITEM: ItemCondition!  #
        ITEMWRAPPER: ItemWrapperCondition!  #
        LIGHT: LightCondition!  #
        METADATA: MetadataCondition!  #
        NOT: NOTCondition!  #
        NPC: NPCCondition!  #
        ONGROUND: OnGroundCondition!  #
        OR: ORCondition!  #
        POTIONEFFECT: PotionEffectCondition!  #
        SHIELDED: ShieldedCondition!  #
        SHOOTER: ShooterCondition!  #
        SIZE: SizeCondition!  #
        SNEAK: SneakCondition!  #
        SPEED: SpeedCondition!  #
        SPRINTING: SprintingCondition!  #
        SWIMMING: SwimmingCondition!  #
        TAMED: TamedCondition!  #
        TEMPERATURE: TemperatureCondition!  #
        TIME: TimeCondition!  #
        VISIBILITY: VisibilityCondition!  #
        WEATHER: WeatherCondition!  #
        WORLD: WorldCondition!  #
Effect: union(unionIdentifier = type)!  # 
    unions: 
        ACTIONBAR: ActionBarEffect!  #
        AOE: AOE!  #
        ARROW: ArrowEffect!  #
        ATTRIBUTE: AttributeEffect!  #
        BLOCKENTITY: BlockEntityEffect!  #
        BONEMEAL: BonemealEffect!  #
        CANCEL: CancelEffect!  #
        CHANGEHERO: ChangeHeroEffect!  #
        COMMAND: CommandEffect!  #
        DAMAGE: DamageEffect!  #
        DISGUISE: DisguiseEffect!  #
        FIRE: IgniteEffect!  #
        FLING: VelocityEffect!  #
        FLY: FlyEffect!  #
        FLYING: FlyEffect!  #
        FREEZE: FreezeEffect!  #
        FURNACEBURNTIME: FurnaceBurnTimeEffect!  #
        GIVEITEM: GiveItemEffect!  #
        GLIDING: GlidingEffect!  #
        HEALTH: HealthEffect!  #
        HUNGER: HungerEffect!  #
        IGNITE: IgniteEffect!  #
        ITEMAMOUNT: ItemAmountEffect!  #
        ITEMMATERIAL: ItemMaterialEffect!  #
        ITEMSTACK: ItemStackWrapperEffect!  #
        KNOCKBACK: KnockbackEffect!  #
        LAUNCH: LaunchEffect!  #
        LIGHTNING: LightningEffect!  #
        LOCATIONCUBE: LocationCubeEffect!  #
        LOCATIONOFFSET: LocationOffsetEffect!  #
        LOSETARGET: LoseTargetEffect!  #
        LUNGE: LungeEffect!  #
        MESSAGE: MessageEffect!  #
        METADATA: MetadataEffect!  #
        NEAREST: NearestEffect!  #
        PARTICLE: ParticleEffect!  #
        PICKUP: Pickup!  #
        PLACEBLOCK: PlaceBlockEffect!  #
        PLAYTRACK: PlayTrackEffect!  #
        POTION: Potion!  #
        PROJECTILE: ProjectileEffect!  #
        RANDOMTELEPORT: RandomTeleportEffect!  #
        RAYTRACE: RaytraceEffect!  #
        REMOVEENTITY: RemoveEntityEffect!  #
        REMOVEPOTION: RemovePotionEffect!  #
        REPULSE: RepulseEffect!  #
        RESIZE: ResizeEffect!  #
        SCRAMBLEINVENTORY: ScrambleInventoryEffect!  #
        SHOOTER: ShooterEffect!  #
        SMITE: LightningEffect!  #
        SOUND: SoundEffect!  #
        SPAWNENTITY: SpawnEffect!  #
        SWAP: SwapEffect!  #
        SWITCHEROO: SwitcherooWrapperEffect!  #
        TARGET: TargetEntityEffect!  #
        TELEPORT: TeleportEffect!  #
        TIMER: TimerEffect!  #
        VEINMINER: VeinMinerEffect!  #
        VELOCITY: VelocityEffect!  #
        WAIT: WaitEffect!  #
        WEB: BlockEntityEffect!  #
EntityComponent: union(unionIdentifier = type)!  # 
    unions: 
        /AbstractHorse/: AbstractHorseComponent!  #
        /Ageable/: AgeableComponent!  #
        /Arrow/: ArrowComponent!  #
        /Axolotl/: AxolotlComponent!  #
        /ChestedHorse/: ChestedHorseComponent!  #
        /Colorable/: ColorableComponent!  #
        /Creeper/: CreeperComponent!  #
        /ExperienceOrb/: ExperienceOrbComponent!  #
        /Explosive/: ExplosiveComponent!  #
        /FallingBlock/: FallingBlockComponent!  #
        /Hoglin/: ZombifiableComponent!  #
        /Horse/: HorseComponent!  #
        /Item/: DroppedItemComponent!  #
        /LivingEntity/: LivingEntityComponent!  #
        /Llama/: LlamaComponent!  #
        /Phantom/: SizeComponent!  #
        /PiglinAbstract/: ZombifiableComponent!  #
        /Rabbit/: RabbitComponent!  #
        /Slime/: SizeComponent!  #
        /SpectralArrow/: SpectralArrowComponent!  #
        /ThrowableProjectile/: ThrowableProjectileComponent!  #
        /ThrownPotion/: PotionEntityComponent!  #
        /TNTPrimed/: PrimedTntComponent!  #
        /Trident/: AbstractArrowComponent!  #
        /WitherSkull/: WitherSkullComponent!  #
        /Wolf/: WolfComponent!  #
EntityData: union(unionIdentifier = type)! {type: "ZOMBIE"} #  
    properties: 
        nameTag: string?  #
        shouldDespawn: boolean? true #
        customNameVisible: boolean? false #
        silent: boolean? false #
        visualFire: boolean? false #
        attributes: {Attribute: number}? {} #
        passenger: EntityData? {} #
    unions: 
        /AbstractHorse/: AbstractHorseComponent!  #
        /Ageable/: AgeableComponent!  #
        /Arrow/: ArrowComponent!  #
        /Axolotl/: AxolotlComponent!  #
        /Colorable/: ColorableComponent!  #
        /Creeper/: CreeperComponent!  #
        /ExperienceOrb/: ExperienceOrbComponent!  #
        /Explosive/: ExplosiveComponent!  #
        /FallingBlock/: FallingBlockComponent!  #
        /Hoglin/: ZombifiableComponent!  #
        /Horse/: HorseComponent!  #
        /Item/: DroppedItemComponent!  #
        /LivingEntity/: LivingEntityComponent!  #
        /Llama/: LlamaComponent!  #
        /Phantom/: SizeComponent!  #
        /PiglinAbstract/: ZombifiableComponent!  #
        /Rabbit/: RabbitComponent!  #
        /Slime/: SizeComponent!  #
        /SpectralArrow/: SpectralArrowComponent!  #
        /ThrowableProjectile/: ThrowableProjectileComponent!  #
        /ThrownPotion/: PotionEntityComponent!  #
        /TNTPrimed/: PrimedTntComponent!  #
        /Trident/: AbstractArrowComponent!  #
        /WitherSkull/: WitherSkullComponent!  #
        /Wolf/: WolfComponent!  #
Shape: union(unionIdentifier = type)!  # 
    unions: 
        EARS: Ears!  #
        FAIRY_WINGS: FairyWings!  #
        HALO: Halo!  #
        HEART: Heart!  #
        HELIX: Helix!  #
        POINT: Point!  #
        WINGS: Wings!  #
        WISP: Wisp!  #
SkillData: union(unionIdentifier = skill)!  # 
    properties: 
        conditions: ConditionListWrapper? {} #
        skill: string?  #
    unions: 
        ATTRIBUTE: AttributeSkillData!  #
        AURA: AuraData!  #
        BEASTCONTROL: BeastControlData!  #
        BLOCK_SPELL: PlaceBlockSpell!  #
        BLOCKDROPS: BlockDropsData!  #
        BLOCKRAY: BlockRayData!  #
        CLIMB: ClimbData!  #
        CONSUME: ConsumeSkillData!  #
        CONVERTBLOCK: ConvertBlockData!  #
        CONVERTDROPS: ConvertDropsData!  #
        CONVERTITEM: ConvertItemData!  #
        CRAFTING: CraftingData!  #
        CREEPER: CreeperData!  #
        CUSTOM: CustomData!  #
        CUSTOM_SPELL: CustomSpell!  #
        DAMAGEMODIFIER: DamageModifierData!  #
        DAMAGEPOTION: DamagePotionData!  #
        DAMAGERESISTANCE: DamageResistanceData!  #
        DECOY: DecoyData!  #
        EGGLAYER: EggLayerData!  #
        ERASER: EraserData!  #
        EXPLOSION_SPELL: ExplosionSpell!  #
        FANGS_SPELL: FangsSpell!  #
        FLIGHT: BlankData!  #
        GIVEITEM: GiveItemData!  #
        GUN: GunData!  #
        HEARTSTEAL: HeartStealData!  #
        INSTANTBREAK: InstantBreakData!  #
        KILLPOTION: KillPotionData!  #
        LIFESTEAL: LifestealData!  #
        LIGHT: LightSkillData!  #
        LIGHTNING_SPELL: LightningSpell!  #
        NOHUNGER: NoHungerData!  #
        OHKO: OHKOData!  #
        PHASE: PhaseData!  #
        PICKPOCKET: PickpocketData!  #
        POTIONEFFECT: PotionEffectSkillData!  #
        POTIONGIFTER: PotionGifterSkillData!  #
        PROJECTILE_SPELL: LaunchProjectileSpell!  #
        REMOTEDETONATION: RemoteDetonationData!  #
        REPULSION: RepulsionData!  #
        SHIELD: ShieldData!  #
        SLAM: SlamData!  #
        SLIME: SlimeData!  #
        SNEAK: SneakData!  #
        SNEAKINGPOTION: SneakingPotionData!  #
        STRONGMAN: StrongmanData!  #
        SUMMON: SummonSkillData!  #
        TELEPORT: TeleportData!  #
        THROWER: ThrowerData!  #
        TRANSMUTATION_SPELL: TransmutationSpell!  #
        WALKER: WalkerData!  #
        WEATHERDAMAGE: WeatherDamageData!  #
SpellData: union(unionIdentifier = skill)!  # 
    properties: 
        fuel: Material? REDSTONE #
        spellName: string?  # undocumented#
        displayName: string? <purple><spellName> #
        cooldownMessage: string? <spellName> has <currentcooldown> seconds remaining. #
        moreFuelMessage: string? This spell needs <fuelneeded> more <fuel> #
        cooldown: number? 1 #
        cost: integer? 1 #
        lore: string[]? [] #
        displayNameFormat: string? <purple><spellName> #
        loreFormat: string[]? [] #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
    unions: 
        BLOCK_SPELL: PlaceBlockSpell!  #
        CUSTOM_SPELL: CustomSpell!  #
        EXPLOSION_SPELL: ExplosionSpell!  #
        FANGS_SPELL: FangsSpell!  #
        LIGHTNING_SPELL: LightningSpell!  #
        PROJECTILE_SPELL: LaunchProjectileSpell!  #
        TRANSMUTATION_SPELL: TransmutationSpell!  #
TriggerData: union(unionIdentifier = type)!  # 
    properties: 
        type: string!  #
        conditions: ConditionList? {} #
    unions: 
        BECOMEVEHICLE: TriggerData!  #
        BLOCKBREAK: TriggerData!  #
        CHANGEMAINHAND: TriggerData!  #
        COMBAT: TriggerData!  #
        CONSUME: TriggerData!  #
        DAMAGED: DamageData!  #
        DAMAGEDBYENTITY: TriggerData!  #
        DAMAGEDBYPROJECTILE: ProjectileData!  #
        DAMAGEDENTITY: TriggerData!  #
        DAMAGEDENTITYWITHPROJECTILE: ProjectileData!  #
        DEATH: TriggerData!  #
        ENTERVEHICLE: TriggerData!  #
        EQUIPARMOR: TriggerData!  #
        EXITVEHICLE: TriggerData!  #
        GAINEDHERO: TriggerData!  #
        INTERACT: InteractData!  #
        INTERACTENTITY: TriggerData!  #
        KILL: TriggerData!  #
        LAUNCHPROJECTILE: TriggerData!  #
        LOOP: LoopData!  #
        LOSTHERO: TriggerData!  #
        MOVE: TriggerData!  #
        PLAYERJOIN: TriggerData!  #
        PLAYERJUMP: TriggerData!  #
        PLAYERQUIT: TriggerData!  #
        POTIONEFFECT: PotionEffectTriggerData!  #
        PROJECTILECOMBAT: ProjectileData!  #
        PROJECTILEHIT: TriggerData!  #
        RIPTIDE: TriggerData!  #
        SNEAK: TriggerData!  #
        SPAWN: TriggerData!  #
        SPRINT: TriggerData!  #
        SWAPHANDS: TriggerData!  #
        TAME: TriggerData!  #
        TARGET: TriggerData!  #
        TARGETED: TriggerData!  #
        TOGGLEGLIDE: TriggerData!  #
        TOGGLESPRINT: TriggerData!  #
        TOTEM: TriggerData!  #
        VEHICLE: TriggerData!  #
AbstractArrowComponent: object(ignoreUnknowns)?  # 
    properties: 
        knockbackStrength: integer? 0 #
        damage: number? 2.0 #
        pierceLevel: integer? 0 #
        critical: boolean? false #
        pickupStatus: AbstractArrow.PickupStatus? DISALLOWED #
AbstractHorseComponent: object(ignoreUnknowns)?  # 
    properties: 
        tamingDifficulty: integer? 1 #
        jumpStrength: number? 0.7 #
        tamed: boolean? false #
        hasSaddle: boolean? false #
ActionBarEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        message: ExpressiveMessage?  #
AgeableComponent: object(ignoreUnknowns)?  # 
    properties: 
        isBaby: boolean? false #
AOE: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        radius: Expression? 5 #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
ArrowComponent: object(ignoreUnknowns)?  # 
    properties: 
        potionType: PotionType?  #
        knockbackStrength: integer? 0 #
        damage: number? 2.0 #
        pierceLevel: integer? 0 #
        critical: boolean? false #
        pickupStatus: AbstractArrow.PickupStatus? DISALLOWED #
ArrowEffect: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - OTHER
        velocity: Expression? 1.0 #
        damage: Expression? 4 #
        entityData: EntityData? { type: "ARROW"} #
        fireTicks: Expression? 0 #
        entity: EntityData? { type: "ARROW"} #
AttributeEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        attribute: Attribute?  #
        operation: ModifyEffect.Operation? SET #
        value: Expression? 1 #
AttributesData: object?  # 
    properties: 
        attributes: {Attribute: number}? {} #
        uniqueKey: string?  #
        equipmentSlot: EquipmentSlotGroup? ANY #
        operation: AttributesData.Operation? MULTIPLY_SCALAR #
        unique_key: string?  #
AttributeSkillData: object?  # 
    properties: 
        attributes: {Attribute: number}!  #
        equipmentSlot: EquipmentSlotGroup!  #
        operation: AttributesData.Operation!  #
        uniqueKey: string!  #
        equipment_slot: EquipmentSlotGroup!  #
        unique_key: string!  #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
AuraData: object?  # 
    properties: 
        radius: number? 5 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
AxolotlComponent: object(ignoreUnknowns)?  # 
    properties: 
        variant: Axolotl.Variant?  #
BeastControlData: object(superdoc = SkillData)?  # 
    properties: 
        maxDistance: number? 32.0 #
        targetMobs: boolean? true #
        glowDuration: number? 3.0 #
        attackItself: boolean? false #
BiomeCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        biomes: Biome[]? [] #
        otherwise: EffectList?  #
        else: EffectList?  #
BlankData: object?  # 
BlockCondition: object?  # 
    properties: 
        mode: enum! LOCATION # 
            values: 
              - ALL
              - LOCATION
        allowedMaterials: Material[]? [] #
        materials: Material[]? [] #
        otherwise: EffectList?  #
        else: EffectList?  #
BlockDataComparisonData: object?  # 
    properties: 
        types: Material[]? [] #
        level: RangeData? -Infinity - Infinity #
        age: RangeData? -Infinity - Infinity #
BlockDataData: object?  # 
    properties: 
        material: Material? STONE #
        level: integer? -1 #
        age: integer? -1 #
        type: Material? STONE #
BlockDropsData: object?  # 
    properties: 
        dropToNewDrop: {Material: ItemStack}? {} #
        replaceDrops: boolean? false #
        convertMap: {Material: ItemStack}? {} #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
BlockEntityEffect: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - OTHER
        durationInTicks: Expression? -1 #
        blockToPlace: Material? COBWEB #
        duration: Expression!  #
BlockRayData: object?  # 
    properties: 
        maxDistance: integer? 20 #
        shouldRevert: boolean? false #
        blocksToPlace: Material[]? [] #
        blocksToReplace: Material[]? [] #
        blockRayMode: BlockRayMode?  #
        revertsAfter: Duration? 15.0 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
BonemealEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        blockFaces: BlockFace[]? [] #
BookData: object?  # 
    properties: 
        title: string!  #
        author: string!  #
        pages: string[]!  #
CancelEffect: object?  # 
ChanceCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        chance: Expression? 1.0 #
        otherwise: EffectList?  #
        else: EffectList?  #
ChangeHeroEffect: object(superdoc = Effect)?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        permanent: boolean? true #
        heroName: string? erased #
        description: string?  #
        broadcast: boolean? true #
        duration: Duration? 0.0 #
ChatLanguageSettings: object?  # 
    properties: 
        gainedHero: string?  #
        noPermission: string?  #
        currentHero: string?  #
        heroCommandCooldown: string?  #
        invalidHeroMessage: string?  #
        invalidPlayerMessage: string?  #
        invalidCommandMessage: string?  #
        invalidRerollGroupMessage: string?  #
ChestedHorseComponent: object(ignoreUnknowns)?  # 
    properties: 
        hasChest: boolean? false #
ClimbData: object?  # 
    properties: 
        proximity: number? 0.2 #
        climbSpeed: number? 0.2 #
        debug: boolean? false #
        blocks: Material[]? [] #
        whitelist: boolean? true #
        speed: number? 0.2 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
Color: object! {red: 100, green: 0, blue: 200} # 
    properties: 
        red: integer!  #
        green: integer!  #
        blue: integer!  #
ColorableComponent: object(ignoreUnknowns)?  # 
    properties: 
        dyeColor: DyeColor?  #
CommandEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        executor: CommandEffect.Executor? CONSOLE #
        commands: ExpressiveMessage[]? [] #
ConfigYaml: object?  # 
    properties: 
        config_version: string?  #
        powerOnStart: PowerOnStartSettings?  #
        gui: GUISettings?  #
        heroCommand: HeroCommandSettings?  #
        defaultHero: Superhero?  #
        disabledWorlds: string[]?  #
ConsumeSkillData: object?  # 
    properties: 
        material: Material? DIRT #
        hunger: integer? 0 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
ConvertBlockData: object?  # 
    properties: 
        inputBlocks: Material[]? [] #
        outputBlock: Material? GOLD_BLOCK #
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
ConvertDropsData: object?  # 
    properties: 
        dropToNewDrop: {Material: ItemStack}? {} #
        ignoredBlocks: Material[]? [] #
        ignoreSilkTouch: boolean? false #
        convertMap: {Material: ItemStack}? {} #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
ConvertItemData: object?  # 
    properties: 
        inputItem: ItemStack?  #
        outputItem: ItemStack?  #
        chance: number? 1 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
CooldownCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        cooldown: Expression? 10 #
        otherwise: EffectList?  #
        else: EffectList?  #
CraftingData: object?  # 
    properties: 
        shapeless: ShapelessRecipeData!  #
        shaped: ShapedRecipeData!  #
        isShaped: true
        conditions: ConditionListWrapper? {} #
        skill: string?  #
CreeperComponent: object(ignoreUnknowns)?  # 
    properties: 
        fuse: integer? 30 #
        ignite: boolean? false #
        explosionRadius: integer? 3 #
        powered: boolean? false #
CreeperData: object?  # 
    properties: 
        fuse: Duration? 2.0 #
        creeperPower: number? 1 #
        upwardsVelocity: number? 2.5 #
        slowfallDuration: Duration? 7.0 #
        creeper_power: number? 1 #
        upwards_velocity: number? 2.5 #
        slowfall_duration: Duration? 7.0 #
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
CustomData: object(superdoc = SkillData)?  # 
    properties: 
        trigger: TriggerData!  #
        effects: EffectList!  #
        conditions: ConditionList!  #
CustomSpell: object(superdoc = SpellData, superdoc = SkillData)?  # 
    properties: 
        effects: EffectList!  #
DamageData: object?  # 
    properties: 
        damageCauses: EntityDamageEvent.DamageCause[]?  #
        causes: EntityDamageEvent.DamageCause[]?  #
        type: string!  #
        conditions: ConditionList? {} #
DamageEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        damage: Expression? 5 #
        damageCause: EntityDamageEvent.DamageCause? CUSTOM #
        shouldTriggerEvents: boolean? false #
DamageModifierData: object?  # 
    properties: 
        entities: EntityType[]? [] #
        causes: EntityDamageEvent.DamageCause[]? [] #
        whitelist: boolean? false #
        expectedMaxDamage: number? 30 #
        maxDamage: number? 15 #
        minDamage: number? 0 #
        priority: integer? 0 #
        incoming: boolean? false #
        outgoing: boolean? false #
        eased: boolean? false #
        limitProjectiles: boolean? true #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
DamagePotionData: object?  # 
    properties: 
        damageCauses: EntityDamageEvent.DamageCause[]? [] #
        damageCause: EntityDamageEvent.DamageCause[]? [] #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
DamageResistanceData: object?  # 
    properties: 
        damageMultiplier: number? 0 #
        damageCauses: EntityDamageEvent.DamageCause[]?  #
        damageCause: EntityDamageEvent.DamageCause[]?  #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
DatabaseSettings: object?  # 
    properties: 
        type: string? YAML #
        host: string? this needs filling with your host name if using mysql #
        port: integer? 3306 #
        name: string? this needs filling with the database name if using mysql #
        username: string? this needs filling with the username of the account being used to connect #
        password: string? this needs filling with the password being used to connect #
DatabaseYaml: object?  # 
    properties: 
        database: DatabaseSettings?  #
        config_version: string?  #
DecoyData: object?  # 
    properties: 
        color: Color?  #
        base64Skin: string? SELF #
        base64skin: string? SELF #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
DisguiseEffect: object(superdoc = Effect)?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        enable: boolean?  #
        entityType: EntityType!  #
        entity: EntityType!  #
DistanceCondition: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - LOCATION
              - OTHER
        distance: RangeData? -Infinity - Infinity #
        otherwise: EffectList?  #
        else: EffectList?  #
DroppedItemComponent: object(ignoreUnknowns)?  # 
    properties: 
        stackData: ItemStackData?  #
Ears: object?  # 
    properties: 
        height: number? 0.2 #
        frequency: number? 0.05 #
        size: number? 1 #
        spread: number? 0.2 #
EffectData: object?  # 
    properties: 
        particles: ParticleData[]? [] #
        name: string?  #
EggLayerData: object?  # 
    properties: 
        tickDelay: Duration? 15.0 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
EnchantComparisonData: object?  # 
    properties: 
        enchantMap: {Enchantment: RangeData}? {} #
EntityWhitelistCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        whitelist: boolean? true #
        entities: EntityType[]? [] #
        otherwise: EffectList?  #
        else: EffectList?  #
EquipableData: object?  # 
    properties: 
        droprate: number? 0.1 #
        type: Material? STONE #
        amount: integer? 1 #
        metadata: ItemMetaData?  #
        quantity: integer? 1 #
EquipmentData: object?  # 
    properties: 
        head: EquipableData?  #
        chest: EquipableData?  #
        legs: EquipableData?  #
        feet: EquipableData?  #
        mainhand: EquipableData?  #
        offhand: EquipableData?  #
        helmet: EquipableData?  #
        chestplate: EquipableData?  #
        leggings: EquipableData?  #
        boots: EquipableData?  #
        hand: EquipableData?  #
EraserData: object?  # 
    properties: 
        range: number? 30 #
        removedMessage: string? <player> has had their power erased temporarily! #
        returnedMessage: string? <player> has had their power reinstated! #
        duration: Duration? 7.5 #
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
ExperienceOrbComponent: object(ignoreUnknowns)?  # 
    properties: 
        experience: integer? 1 #
ExplosionSpell: object?  # 
ExplosiveComponent: object(ignoreUnknowns)?  # 
    properties: 
        yield: number?  #
        isIncendiary: boolean? false #
FairyWings: object?  # 
    properties: 
        height: number? 1 #
        frequency: number? 0.05 #
        size: number? 1 #
FallingBlockComponent: object(ignoreUnknowns)?  # 
    properties: 
        blockData: BlockData?  # undocumented#
        dropItem: boolean? true #
        cancelDrop: boolean? false #
        hurtEntities: boolean? false #
        damagePerBlock: number? 2 #
        maxDamage: integer? 40 #
FangsSpell: object?  # 
FlyEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        fly: boolean? true #
FlyingCondition: object?  # 
FreezeEffect: object?  # 
FurnaceBurnTimeEffect: object?  # 
GiveItemData: object?  # 
    properties: 
        item: ItemStack?  #
        canStore: boolean? true #
        canDrop: boolean? true #
        canLoseOnDeath: boolean? true #
        loseItemOnHeroLoss: boolean? true #
        dropsOnDeath: boolean? true #
        canDropOnDeath: boolean? true #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
GiveItemEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        item: ItemStack!  #
        dropIfFull: boolean? true #
GlidingCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        shouldGlide: boolean? true #
        glide: boolean? true #
        otherwise: EffectList?  #
        else: EffectList?  #
GlidingEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        glide: boolean? true #
GlobalRerollSettings: object?  # 
    properties: 
        itemEnabled: boolean? true #
        eachHeroRequiresPermission: boolean?  #
        itemCooldown: number?  #
GUILanguageSettings: object?  # 
    properties: 
        name: string? Pick your hero! #
GUISettings: object?  # 
    properties: 
        startsOpen: boolean!  #
        onStart: boolean!  #
        closeable: boolean!  #
        canClose: boolean!  #
GunData: object?  # 
    properties: 
        damage: number? 5.0 #
        maxDistance: number? 64 #
        bulletSize: number? 1.0 #
        item: ItemComparisonData? {} #
        shootSound: SoundData?  #
        trailParticle: ParticleData?  #
        hitParticle: ParticleData?  #
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
Halo: object?  # 
    properties: 
        radius: number? 0.3 #
        height: number? 0.3 #
        resolution: number? 32 #
HealthCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        healthPercentage: RangeData? -Infinity - Infinity #
        otherwise: EffectList?  #
        else: EffectList?  #
HealthEffect: object?  # 
Heart: object?  # 
    properties: 
        height: number? 2 #
        frequency: number? 0.05 #
        size: number? 1 #
HeartStealData: object?  # 
    properties: 
        heartsGained: integer? 2 #
        entities: EntityType[]? [] #
        maxHearts: integer? 24 #
        heartsgained: integer? 2 #
        maxhearts: integer? 24 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
HeightCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        height: RangeData? -Infinity - Infinity #
        otherwise: EffectList?  #
        else: EffectList?  #
Helix: object?  # 
    properties: 
        radius: number? 0.5 #
        interval: number? 0.05 #
        speed: number? 1 #
        waveFrequency: number? 1 #
        height: number? 2 #
        wave_frequency: number? 1 #
HeroCommandSettings: object?  # 
    properties: 
        cooldown: number?  #
        aliases: string[]?  #
HorseComponent: object(ignoreUnknowns)?  # 
    properties: 
        armor: ItemStack?  #
        color: Horse.Color? CHESTNUT #
        style: Horse.Style? NONE #
HotbarSlotCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - SELF
        slot: RangeData?  #
        otherwise: EffectList?  #
        else: EffectList?  #
HungerEffect: object?  # 
IgniteEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        fireTicks: Expression?  #
InBlockCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        blocks: Material[]? [] #
        otherwise: EffectList?  #
        else: EffectList?  #
InstantBreakData: object?  # 
    properties: 
        instantBreakable: Material[]? [] #
        breakUsing: Material?  #
        blocks: Material[]? [] #
        breakusing: Material?  #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
InteractData: object?  # 
    properties: 
        actions: Action[]?  #
        type: string!  #
        conditions: ConditionList? {} #
ItemAmountEffect: object?  # 
ItemComparisonData: object?  # 
    properties: 
        types: Material[]? [] #
        type: Material?  #
        amount: RangeData? -Infinity - Infinity #
        metadata: ItemMetaComparisonData?  #
ItemCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - ITEM
              - OTHER
              - SELF
        itemComparison: ItemComparisonData!  #
        slot: InventorySlot? HAND #
        item: ItemComparisonData!  #
        otherwise: EffectList?  #
        else: EffectList?  #
ItemMaterialEffect: object?  # 
    properties: 
        mode: enum! ITEM # 
            values: 
              - ALL
              - ITEM
        material: Material?  #
ItemMetaComparisonData: object?  # 
    properties: 
        displayName: string!  #
        lore: LoreData!  #
        enchants: EnchantComparisonData!  #
ItemMetaData: object?  # 
    properties: 
        displayName: string?  #
        lore: string[]?  #
        isUnbreakable: boolean? false #
        durability: integer? 0 #
        customModelData: integer? 0 #
        attributes: AttributesData?  #
        trim: TrimData?  #
        flags: ItemFlag[]? [] #
        book: BookData?  #
        color: LeatherArmorColor?  #
        enchantments: {Enchantment: integer}? {} #
ItemStackData: object?  # 
    properties: 
        type: Material? STONE #
        amount: integer? 1 #
        metadata: ItemMetaData?  #
        quantity: integer? 1 #
ItemStackWrapperEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        slot: InventorySlot? HAND #
        equipmentSlot: InventorySlot? HAND #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
ItemWrapperCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        slot: InventorySlot? HAND #
        conditions: ConditionList? {} #
        otherwise: EffectList?  #
        else: EffectList?  #
KillPotionData: object?  # 
    properties: 
        entities: EntityType[]?  #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
KnockbackEffect: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - OTHER
        multiplier: Expression? 1.0 #
        overwriteCurrentVelocity: boolean? true #
LanguageYaml: object?  # 
    properties: 
        config_version: string?  #
        chatLanguageSettings: ChatLanguageSettings?  #
        guiLanguageSettings: GUILanguageSettings?  #
        Chat: ChatLanguageSettings?  #
        GUI: GUILanguageSettings?  #
LaunchEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        entity: EntityData? { type: "FIREBALL"} #
        velocity: Expression? 1.0 #
LaunchProjectileSpell: object?  # 
    properties: 
        projectile: EntityData? {} #
        fuel: Material? REDSTONE #
        spellName: string?  # undocumented#
        displayName: string? <purple><spellName> #
        cooldownMessage: string? <spellName> has <currentcooldown> seconds remaining. #
        moreFuelMessage: string? This spell needs <fuelneeded> more <fuel> #
        cooldown: number? 1 #
        cost: integer? 1 #
        lore: string[]? [] #
        displayNameFormat: string? <purple><spellName> #
        loreFormat: string[]? [] #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
LeatherArmorColor: object?  # 
    properties: 
        red: integer? -1 #
        green: integer? -1 #
        blue: integer? -1 #
LifestealData: object?  # 
    properties: 
        lifestealPercentage: number? 5 #
        lifestealpercentage: number? 5 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
LightCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        checkNatural: boolean? true #
        checkBlocks: boolean? true #
        lightRange: RangeData? -Infinity - Infinity #
        checkNaturalLight: boolean? true #
        checkBlockLight: boolean? true #
        light: RangeData? -Infinity - Infinity #
        otherwise: EffectList?  #
        else: EffectList?  #
LightningEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        fake: boolean? false #
LightningSpell: object?  # 
LightSkillData: object?  # 
LivingEntityComponent: object(ignoreUnknowns)?  # 
    properties: 
        canEquip: boolean? false #
        equipment: EquipmentData?  #
LlamaComponent: object(ignoreUnknowns)?  # 
    properties: 
        color: Llama.Color?  #
        strength: integer? 1 #
LocationCubeEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        verticalRadius: integer? 0 #
        horizontalRadius: integer? 0 #
        offset: Vector? { x: 0, y: 0, z: 0 } #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
LocationOffsetEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        offset: Vector? { x: 0, y: 0, z: 0 } #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
LoopData: object?  # 
    properties: 
        period: Duration? 1.0 #
        type: string!  #
        conditions: ConditionList? {} #
LoseTargetEffect: object?  # 
LungeEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        horizontalVelocity: Expression? 0 #
        verticalVelocity: Expression? 0 #
        overwrite: boolean? true #
MessageEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        message: ExpressiveMessage?  #
MetadataCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        variable: string!  #
        value: Expression!  #
        comparison: ComparisonCondition.Comparison? EQUAL #
        otherwise: EffectList?  #
        else: EffectList?  #
MetadataEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        variable: string!  #
        operation: ModifyEffect.Operation? SET #
        value: Expression? 1 #
NearestEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        radius: number? 5 #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
NoHungerData: object?  # 
    properties: 
        minimumHunger: number? 19 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
NOTCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - ITEM
              - LOCATION
              - OTHER
              - SELF
        condition: Condition?  #
        otherwise: EffectList?  #
        else: EffectList?  #
NPCCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        npc: boolean? true #
        isNPC: boolean? true #
        otherwise: EffectList?  #
        else: EffectList?  #
OHKOData: object?  # 
    properties: 
        entityTypes: EntityType[]?  #
        displayName: string?  #
        entitytypes: EntityType[]?  #
        displayname: string?  #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
OnGroundCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        grounded: boolean? true #
        isGrounded: boolean? true #
        otherwise: EffectList?  #
        else: EffectList?  #
OptionsData: object?  # 
    properties: 
        colours: Color[]? [] #
        scale: number? 1.0 #
ORCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - ITEM
              - LOCATION
              - OTHER
              - SELF
        conditions: ConditionList?  #
        otherwise: EffectList?  #
        else: EffectList?  #
ParticleData: object?  # 
    properties: 
        duration: number? 2.5 #
        particle: Particle? PORTAL #
        amount: integer? 1 #
        shape: Shape?  # undocumented#
        extra: number? 0 #
        options: OptionsData?  #
        numberOfParticles: integer? 1 #
ParticleEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        particleData: ParticleData!  #
PhaseData: object?  # 
    properties: 
        minimumPhaseYAxis: number? 5 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
PickpocketData: object?  # 
    properties: 
        range: number? 3 #
        isSneaking: boolean? true #
        sneaking: boolean? true #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
Pickup: object?  # 
PlaceBlockEffect: object?  # 
    properties: 
        mode: enum! LOCATION # 
            values: 
              - ALL
              - LOCATION
        blockData: BlockData!  #
        updatePhysics: boolean? true #
        isPacket: boolean? false #
        revertConditions: ConditionList? {} #
        revertsAfter: Expression? -1 #
        block: BlockData!  #
PlaceBlockSpell: object?  # 
    properties: 
        block: BlockData?  #
        fuel: Material? REDSTONE #
        spellName: string?  # undocumented#
        displayName: string? <purple><spellName> #
        cooldownMessage: string? <spellName> has <currentcooldown> seconds remaining. #
        moreFuelMessage: string? This spell needs <fuelneeded> more <fuel> #
        cooldown: number? 1 #
        cost: integer? 1 #
        lore: string[]? [] #
        displayNameFormat: string? <purple><spellName> #
        loreFormat: string[]? [] #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
PlayTrackEffect: object(superdoc = Effect)?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        song: Song?  #
        track: Song?  #
Point: object?  # 
    properties: 
        spread: number? 0 #
        yOffset: number? 0 #
        offset: number? 0 #
Potion: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        potionEffect: PotionEffectData?  #
        potion: PotionEffectData?  #
PotionEffectCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        effect: PotionEffectType!  #
        potency: RangeData? -Infinity - Infinity #
        duration: RangeData? -Infinity - Infinity #
        otherwise: EffectList?  #
        else: EffectList?  #
PotionEffectData: object?  # 
    properties: 
        type: PotionEffectType!  #
        duration: number? 5 #
        potency: integer? 0 #
        ambient: boolean? true #
        hasParticles: boolean? true #
PotionEffectSkillData: object?  # 
PotionEffectTriggerData: object?  # 
    properties: 
        types: PotionEffectType[]? [] #
        causes: EntityPotionEffectEvent.Cause[]?  #
        actions: EntityPotionEffectEvent.Action[]?  #
        type: string!  #
        conditions: ConditionList? {} #
PotionEntityComponent: object(ignoreUnknowns)?  # 
    properties: 
        potion: ItemStack? SPLASH_POTION #
PotionGifterSkillData: object?  # 
    properties: 
        cooldown: number? 10 #
        receiverMessage: string? <grey><i>You have received a potion effect. #
        giverMessage: string? <grey><i>You gave them a potion effect. #
        cooldownMessage: string? <grey><i>You have <currentcooldown> seconds left until it can be used again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
PotionMetaData: object?  # 
    properties: 
        type: PotionType? SWIFTNESS #
        extended: boolean? false #
        upgraded: boolean? false #
PowerOnStartSettings: object?  # 
    properties: 
        enabled: boolean!  #
        isEnabled: boolean!  #
        firstJoinTitle: boolean!  #
        showHero: boolean!  #
PrimedTntComponent: object(ignoreUnknowns)?  # 
    properties: 
        fuseTicks: integer? 100 #
ProjectileData: object?  # 
    properties: 
        onlyProjectiles: boolean? false #
        type: string!  #
        conditions: ConditionList? {} #
ProjectileEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        projectile: EntityData? { type: "SNOWBALL"} #
        velocity: number? 1.0 #
RabbitComponent: object(ignoreUnknowns)?  # 
    properties: 
        variant: Rabbit.Type?  #
RandomTeleportEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        maxDistance: number? 10 #
        minDistance: number? 5 #
RaytraceEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        maxDistance: number? 10 #
        collisionMode: FluidCollisionMode? NEVER #
        ignorePassables: boolean? true #
        alwaysHit: boolean? true #
        raySize: number? 1.0 #
        raysize: number? 1.0 #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
RemoteDetonationData: object?  # 
    properties: 
        spawnsFire: boolean? false #
        breakBlocks: boolean? true #
        removeDetonatedEntity: boolean? true #
        explosionStrength: number? 1 #
        explodable: EntityType[]? [] #
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
RemoveEntityEffect: object?  # 
RemovePotionEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        types: PotionEffectType[]? [] #
RepulseEffect: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - OTHER
        velocity: number? 1.0 #
        add: boolean? false #
RepulsionData: object?  # 
    properties: 
        multiplier: number? 1 #
        radius: number? 5.0 #
        blacklist: EntityType[]? [] #
        entityBlacklist: EntityType[]? [] #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
RerollConfig: object?  # 
    properties: 
        configVersion: string?  #
        globalRerollSettings: GlobalRerollSettings?  # default#
        rerollGroups: RerollGroup{}? {} #
        config_version: string?  #
        global_reroll_settings: GlobalRerollSettings?  # default#
        reroll_groups: RerollGroup{}? {} #
RerollGroup: object?  # 
    properties: 
        weightedHeroes: RerollGroup.WeightedHero[]? [] #
        itemComparator: ItemComparisonData?  #
        heroes: RerollGroup.WeightedHero[]? [] #
        item: ItemComparisonData?  #
RerollGroup.WeightedHero: object?  # 
    properties: 
        hero: string!  #
        weight: integer!  #
ResizeEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        retainHealth: boolean? true #
        operation: ModifyEffect.Operation? SET #
        value: Expression? 1 #
ScrambleInventoryEffect: object?  # 
ShapedRecipeData: object?  # 
    properties: 
        recipe: string[]! [] #
        recipeKeys: {Material: string}! {} #
        result: ItemStack!  #
        uniqueKey: string!  #
        unique_key: string!  #
ShapelessRecipeData: object?  # 
    properties: 
        result: ItemStack!  #
        ingredients: {Material: integer}! {} #
        uniqueKey: string!  #
        unique_key: string!  #
ShieldData: object?  # 
    properties: 
        cooldown: Duration? 100.0 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
ShieldedCondition: object?  # 
ShooterCondition: object?  # 
ShooterEffect: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - OTHER
        onlyProjectiles: boolean? true #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
SizeComponent: object(ignoreUnknowns)?  # 
    properties: 
        size: integer?  #
SizeCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        size: RangeData? -Infinity - Infinity #
        otherwise: EffectList?  #
        else: EffectList?  #
Skill: object?  # 
    properties: 
        trigger: TriggerData!  #
        effects: EffectList!  #
        conditions: ConditionList!  #
Skin: object?  # 
    properties: 
        value: string?  #
        signature: string?  #
SlamData: object?  # 
    properties: 
        hand: ItemStack? AIR #
        airCooldown: number? 1 #
        foodCost: integer? 0 #
        minimumFood: integer? 0 #
        radius: number? 5 #
        damage: number? 0 #
        item: ItemStack? AIR #
        diameterRadius: number? 5 #
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
SlimeData: object?  # 
    properties: 
        speedMultiplier: number? 1 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
SneakCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        sneak: boolean? true #
        otherwise: EffectList?  #
        else: EffectList?  #
SneakData: object?  # 
    properties: 
        mustSneak: boolean?  #
        needsInvisibility: boolean?  #
        sneak: boolean?  #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
SneakingPotionData: object?  # 
SoundData: object?  # 
    properties: 
        sound: Sound? ENTITY_GENERIC_EXPLODE #
        volume: number? 1.0 #
        pitch: number? 1.0 #
SoundEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        sound: SoundData?  #
SpawnEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        entity: EntityData? { type: "ZOMBIE"} #
SpectralArrowComponent: object(ignoreUnknowns)?  # 
    properties: 
        glowingTicks: integer? 200 #
        knockbackStrength: integer? 0 #
        damage: number? 2.0 #
        pierceLevel: integer? 0 #
        critical: boolean? false #
        pickupStatus: AbstractArrow.PickupStatus? DISALLOWED #
SpeedCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        speedRange: RangeData?  #
        speed: RangeData?  #
        otherwise: EffectList?  #
        else: EffectList?  #
SprintingCondition: object?  # 
StrongmanData: object?  # 
    properties: 
        velocity: number? 2.5 #
        upwardsVelocity: number? 1 #
        tooMuscularMessage: string? <player> <white> is too strong to sit in a vehicle! #
        maxPassengers: integer? 10 #
        upwardsvelocity: number? 1 #
        toomuscularmessage: string? <player> <white> is too strong to sit in a vehicle! #
        maxpassengers: integer? 10 #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
SummonSkillData: object?  # 
    properties: 
        range: integer? 10 #
        repel: boolean? false #
        mustSneak: boolean? true #
        entity: EntityType? LIGHTNING_BOLT #
        action: Action[]?  # undocumented#
        cooldown: number? 10.0 #
        cooldownMessage: string? <yellow><bold>Zeus <white>Cooldown: <s> seconds #
        sneak: boolean? true #
        mustsneak: boolean? true #
        entityType: EntityType? LIGHTNING_BOLT #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
Superhero: object(ignoreUnknowns)?  # 
    properties: 
        name: string?  #
        colouredName: string?  #
        description: string?  #
        heroGainedSound: SoundData?  #
        skin: Skin?  #
        icon: ItemStack?  #
        skills: SkillsContainer? {} #
        plusUltraSkills: PlusUltraSkillsContainer? {} #
SuperheroCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        heroes: string[]? [] #
SwapEffect: object?  # 
SwimmingCondition: object?  # 
SwitcherooWrapperEffect: object?  # 
TamedCondition: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - OTHER
        checkOwner: boolean? true #
        otherwise: EffectList?  #
        else: EffectList?  #
TargetEntityEffect: object?  # 
TeleportData: object?  # 
    properties: 
        actions: Action[]?  # undocumented#
        distance: integer? 30 #
        yAxisMultiplier: number? 1 #
        teleportCause: PlayerTeleportEvent.TeleportCause? ENDER_PEARL #
        particle: ParticleData?  #
        teleportItem: ItemComparisonData?  # undocumented#
        action: Action[]?  # undocumented#
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
TeleportEffect: object?  # 
TemperatureCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        temperatureRange: RangeData?  #
        temperature: RangeData?  #
        otherwise: EffectList?  #
        else: EffectList?  #
ThrowableProjectileComponent: object(ignoreUnknowns)?  # 
    properties: 
        itemStackData: ItemStackData?  #
ThrowerData: object?  # 
    properties: 
        ammoCost: integer? 1 #
        ammo: ItemComparisonData? {} #
        projectile: EntityType? SNOWBALL #
        actions: Action[]?  # undocumented#
        canPickUp: boolean? false #
        velocity: number? 1.4 #
        damage: number? 3 #
        item: ItemComparisonData? {} #
        cooldown: number? 0 #
        cooldownMessage: string? You have <currentcooldown> seconds remaining before you can use the ability again! #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
TimeCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - SELF
        time: RangeData? -Infinity - Infinity #
        otherwise: EffectList?  #
        else: EffectList?  #
TimerEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - ITEM
              - LOCATION
              - OTHER
              - SELF
        ticksDelay: Duration? 1.0 #
        period: Duration? 1.0 #
        repeats: integer? 1 #
        delay: Duration? 1.0 #
        numberOfRepeats: integer? 1 #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
TransmutationSpell: object?  # 
    properties: 
        transmutableBlocks: Material[]? [] #
        block: BlockData?  # undocumented#
        resultantBlock: BlockData?  # undocumented#
        fuel: Material? REDSTONE #
        spellName: string?  # undocumented#
        displayName: string? <purple><spellName> #
        cooldownMessage: string? <spellName> has <currentcooldown> seconds remaining. #
        moreFuelMessage: string? This spell needs <fuelneeded> more <fuel> #
        cooldown: number? 1 #
        cost: integer? 1 #
        lore: string[]? [] #
        displayNameFormat: string? <purple><spellName> #
        loreFormat: string[]? [] #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
TrimData: object?  # 
    properties: 
        pattern: TrimPattern?  #
        material: TrimMaterial?  #
Vector: object! {x: 0, y: 0, z: 0} # 
    properties: 
        x: number!  #
        y: number!  #
        z: number!  #
VeinMinerEffect: object?  # 
    properties: 
        mode: enum! LOCATION # 
            values: 
              - ALL
              - LOCATION
        materials: Material[]? [] #
        delay: Duration? 0.05 #
        limit: integer? 10 #
        allowMultiTypeVein: boolean? false #
        types: Material[]? [] #
VelocityEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - OTHER
              - SELF
        component: string? Y #
        operation: ModifyEffect.Operation? SET #
        value: Expression? 1 #
VisibilityCondition: object?  # 
    properties: 
        mode: enum! OTHER # 
            values: 
              - ALL
              - OTHER
        maxDistance: number? 16 #
        distance: number? 16 #
        otherwise: EffectList?  #
        else: EffectList?  #
WaitEffect: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - ITEM
              - LOCATION
              - OTHER
              - SELF
        ticksDelay: Duration? 20.0 #
        delay: Duration? 20.0 #
        conditions: ConditionList? {} #
        effects: EffectList? {} #
WalkerData: object?  # 
    properties: 
        blocksToPlace: Material[]? [] #
        blocksToReplace: Material[]? [] #
        blocksToPlaceOn: Material[]? [] #
        isSneaking: boolean? false #
        blocksDrop: boolean? true #
        shouldRevert: boolean? false #
        aboveFloor: boolean? false #
        canPlaceFloating: boolean? true #
        revertsAfter: Duration? 15.0 #
        sneaking: boolean? false #
        issneaking: boolean? false #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
WeatherCondition: object?  # 
WeatherDamageData: object?  # 
    properties: 
        damage: number? 1.0 #
        checkShelter: boolean? true #
        conditions: ConditionListWrapper? {} #
        skill: string?  #
Wings: object?  # 
Wisp: object?  # 
    properties: 
        radius: number? 0.5 #
        speed: number? 1 #
        waveFrequency: number? 1 #
        height: number? 2 #
        wave_frequency: number? 1 #
WitherSkullComponent: object(ignoreUnknowns)?  # 
    properties: 
        isCharged: boolean? false #
WolfComponent: object(ignoreUnknowns)?  # 
    properties: 
        angry: boolean? false #
WorldCondition: object?  # 
    properties: 
        mode: enum! SELF # 
            values: 
              - ALL
              - LOCATION
              - OTHER
              - SELF
        worlds: string[]? [] #
        otherwise: EffectList?  #
        else: EffectList?  #
ZombifiableComponent: object(ignoreUnknowns)?  # 
    properties: 
        immuneToZombification: boolean? false #
AbstractArrow.PickupStatus: enum?  # 
    values: 
      - ALLOWED
      - CREATIVE_ONLY
      - DISALLOWED
AbstractHorse: enum!  # 
    values: 
      - CAMEL
      - DONKEY
      - HORSE
      - LLAMA
      - MULE
      - SKELETON_HORSE
      - TRADER_LLAMA
      - ZOMBIE_HORSE
Action: enum?  # 
    values: 
      - LEFT_CLICK_AIR
      - LEFT_CLICK_BLOCK
      - PHYSICAL
      - RIGHT_CLICK_AIR
      - RIGHT_CLICK_BLOCK
Ageable: enum!  # 
    values: 
      - ARMADILLO
      - AXOLOTL
      - BEE
      - CAMEL
      - CAT
      - CHICKEN
      - COW
      - DOLPHIN
      - DONKEY
      - DROWNED
      - FOX
      - FROG
      - GLOW_SQUID
      - GOAT
      - HOGLIN
      - HORSE
      - HUSK
      - LLAMA
      - MOOSHROOM
      - MULE
      - OCELOT
      - PANDA
      - PARROT
      - PIG
      - PIGLIN
      - PIGLIN_BRUTE
      - POLAR_BEAR
      - RABBIT
      - SHEEP
      - SKELETON_HORSE
      - SNIFFER
      - SQUID
      - STRIDER
      - TRADER_LLAMA
      - TURTLE
      - VILLAGER
      - WANDERING_TRADER
      - WOLF
      - ZOGLIN
      - ZOMBIE
      - ZOMBIE_HORSE
      - ZOMBIE_VILLAGER
      - ZOMBIFIED_PIGLIN
Arrow: enum!  # 
    values: 
      - ARROW
Attribute: enum!  # 
    values: 
      - armor
      - armor_toughness
      - attack_damage
      - attack_knockback
      - attack_speed
      - block_break_speed
      - block_interaction_range
      - burning_time
      - entity_interaction_range
      - explosion_knockback_resistance
      - fall_damage_multiplier
      - flying_speed
      - follow_range
      - gravity
      - jump_strength
      - knockback_resistance
      - luck
      - max_absorption
      - max_health
      - mining_efficiency
      - movement_efficiency
      - movement_speed
      - oxygen_bonus
      - safe_fall_distance
      - scale
      - sneaking_speed
      - spawn_reinforcements
      - step_height
      - submerged_mining_speed
      - sweeping_damage_ratio
      - tempt_range
      - water_movement_efficiency
AttributesData.Operation: enum?  # 
    values: 
      - ADD_NUMBER
      - ADD_SCALAR
      - MULTIPLY_SCALAR
      - MULTIPLY_SCALAR_1
Axolotl: enum!  # 
    values: 
      - AXOLOTL
Axolotl.Variant: enum?  # 
    values: 
      - BLUE
      - CYAN
      - GOLD
      - LUCY
      - WILD
Biome: enum!  # 
    values: 
      - BADLANDS
      - BAMBOO_JUNGLE
      - BASALT_DELTAS
      - BEACH
      - BIRCH_FOREST
      - CHERRY_GROVE
      - COLD_OCEAN
      - CRIMSON_FOREST
      - DARK_FOREST
      - DEEP_COLD_OCEAN
      - DEEP_DARK
      - DEEP_FROZEN_OCEAN
      - DEEP_LUKEWARM_OCEAN
      - DEEP_OCEAN
      - DESERT
      - DRIPSTONE_CAVES
      - END_BARRENS
      - END_HIGHLANDS
      - END_MIDLANDS
      - ERODED_BADLANDS
      - FLOWER_FOREST
      - FOREST
      - FROZEN_OCEAN
      - FROZEN_PEAKS
      - FROZEN_RIVER
      - GROVE
      - ICE_SPIKES
      - JAGGED_PEAKS
      - JUNGLE
      - LUKEWARM_OCEAN
      - LUSH_CAVES
      - MANGROVE_SWAMP
      - MEADOW
      - MUSHROOM_FIELDS
      - NETHER_WASTES
      - OCEAN
      - OLD_GROWTH_BIRCH_FOREST
      - OLD_GROWTH_PINE_TAIGA
      - OLD_GROWTH_SPRUCE_TAIGA
      - PALE_GARDEN
      - PLAINS
      - RIVER
      - SAVANNA
      - SAVANNA_PLATEAU
      - SMALL_END_ISLANDS
      - SNOWY_BEACH
      - SNOWY_PLAINS
      - SNOWY_SLOPES
      - SNOWY_TAIGA
      - SOUL_SAND_VALLEY
      - SPARSE_JUNGLE
      - STONY_PEAKS
      - STONY_SHORE
      - SUNFLOWER_PLAINS
      - SWAMP
      - TAIGA
      - THE_END
      - THE_VOID
      - WARM_OCEAN
      - WARPED_FOREST
      - WINDSWEPT_FOREST
      - WINDSWEPT_GRAVELLY_HILLS
      - WINDSWEPT_HILLS
      - WINDSWEPT_SAVANNA
      - WOODED_BADLANDS
BlockFace: enum?  # 
    values: 
      - DOWN
      - EAST
      - EAST_NORTH_EAST
      - EAST_SOUTH_EAST
      - NORTH
      - NORTH_EAST
      - NORTH_NORTH_EAST
      - NORTH_NORTH_WEST
      - NORTH_WEST
      - SELF
      - SOUTH
      - SOUTH_EAST
      - SOUTH_SOUTH_EAST
      - SOUTH_SOUTH_WEST
      - SOUTH_WEST
      - UP
      - WEST
      - WEST_NORTH_WEST
      - WEST_SOUTH_WEST
BlockRayMode: enum?  # 
    values: 
      - ABOVEBLOCK
      - CLOSERBLOCK
      - THEBLOCK
ChestedHorse: enum!  # 
    values: 
      - DONKEY
      - LLAMA
      - MULE
      - TRADER_LLAMA
Colorable: enum!  # 
    values: 
      - SHEEP
      - SHULKER
CommandEffect.Executor: enum?  # 
    values: 
      - CONSOLE
      - PLAYER
ComparisonCondition.Comparison: enum!  # 
    values: 
      - EQUAL
      - GREATER
      - GREATEREQUAL
      - LESS
      - LESSEQUAL
Creeper: enum!  # 
    values: 
      - CREEPER
DyeColor: enum?  # 
    values: 
      - BLACK
      - BLUE
      - BROWN
      - CYAN
      - GRAY
      - GREEN
      - LIGHT_BLUE
      - LIGHT_GRAY
      - LIME
      - MAGENTA
      - ORANGE
      - PINK
      - PURPLE
      - RED
      - WHITE
      - YELLOW
Enchantment: enum!  # 
    values: 
      - aqua_affinity
      - bane_of_arthropods
      - binding_curse
      - blast_protection
      - breach
      - channeling
      - density
      - depth_strider
      - efficiency
      - feather_falling
      - fire_aspect
      - fire_protection
      - flame
      - fortune
      - frost_walker
      - impaling
      - infinity
      - knockback
      - looting
      - loyalty
      - luck_of_the_sea
      - lure
      - mending
      - multishot
      - piercing
      - power
      - projectile_protection
      - protection
      - punch
      - quick_charge
      - respiration
      - riptide
      - sharpness
      - silk_touch
      - smite
      - soul_speed
      - sweeping_edge
      - swift_sneak
      - thorns
      - unbreaking
      - vanishing_curse
      - wind_burst
EntityDamageEvent.DamageCause: enum?  # 
    values: 
      - BLOCK_EXPLOSION
      - CAMPFIRE
      - CONTACT
      - CRAMMING
      - CUSTOM
      - DRAGON_BREATH
      - DROWNING
      - DRYOUT
      - ENTITY_ATTACK
      - ENTITY_EXPLOSION
      - ENTITY_SWEEP_ATTACK
      - FALL
      - FALLING_BLOCK
      - FIRE
      - FIRE_TICK
      - FLY_INTO_WALL
      - FREEZE
      - HOT_FLOOR
      - KILL
      - LAVA
      - LIGHTNING
      - MAGIC
      - MELTING
      - POISON
      - PROJECTILE
      - SONIC_BOOM
      - STARVATION
      - SUFFOCATION
      - SUICIDE
      - THORNS
      - VOID
      - WITHER
      - WORLD_BORDER
EntityPotionEffectEvent.Action: enum?  # 
    values: 
      - ADDED
      - CHANGED
      - CLEARED
      - REMOVED
EntityPotionEffectEvent.Cause: enum?  # 
    values: 
      - AREA_EFFECT_CLOUD
      - ARROW
      - ATTACK
      - AXOLOTL
      - BEACON
      - COMMAND
      - CONDUIT
      - CONVERSION
      - DEATH
      - DOLPHIN
      - EXPIRATION
      - FOOD
      - ILLUSION
      - MILK
      - PATROL_CAPTAIN
      - PLUGIN
      - POTION_DRINK
      - POTION_SPLASH
      - SPIDER_SPAWN
      - TOTEM
      - TURTLE_HELMET
      - UNKNOWN
      - VILLAGER_TRADE
      - WARDEN
      - WITHER_ROSE
EntityType: enum!  # 
EquipmentSlot: enum? HAND # 
    values: 
      - BODY
      - CHEST
      - FEET
      - HAND
      - HEAD
      - LEGS
      - OFF_HAND
EquipmentSlotGroup: enum? ANY # 
    values: 
      - ANY
      - ARMOR
      - CHEST
      - FEET
      - HAND
      - HEAD
      - LEGS
      - MAINHAND
      - OFFHAND
ExperienceOrb: enum!  # 
    values: 
      - EXPERIENCE_ORB
Explosive: enum!  # 
    values: 
      - BREEZE_WIND_CHARGE
      - DRAGON_FIREBALL
      - FIREBALL
      - SMALL_FIREBALL
      - TNT
      - TNT_MINECART
      - WIND_CHARGE
      - WITHER_SKULL
FallingBlock: enum!  # 
    values: 
      - FALLING_BLOCK
FluidCollisionMode: enum?  # 
    values: 
      - ALWAYS
      - NEVER
      - SOURCE_ONLY
Hoglin: enum!  # 
    values: 
      - HOGLIN
Horse: enum!  # 
    values: 
      - HORSE
Horse.Color: enum?  # 
    values: 
      - BLACK
      - BROWN
      - CHESTNUT
      - CREAMY
      - DARK_BROWN
      - GRAY
      - WHITE
Horse.Style: enum?  # 
    values: 
      - BLACK_DOTS
      - NONE
      - WHITE
      - WHITEFIELD
      - WHITE_DOTS
Item: enum!  # 
    values: 
      - ITEM
ItemFlag: enum?  # 
    values: 
      - HIDE_ADDITIONAL_TOOLTIP
      - HIDE_ARMOR_TRIM
      - HIDE_ATTRIBUTES
      - HIDE_DESTROYS
      - HIDE_DYE
      - HIDE_ENCHANTS
      - HIDE_PLACED_ON
      - HIDE_UNBREAKABLE
LivingEntity: enum!  # 
    values: 
      - ALLAY
      - ARMADILLO
      - ARMOR_STAND
      - AXOLOTL
      - BAT
      - BEE
      - BLAZE
      - BOGGED
      - BREEZE
      - CAMEL
      - CAT
      - CAVE_SPIDER
      - CHICKEN
      - COD
      - COW
      - CREAKING
      - CREEPER
      - DOLPHIN
      - DONKEY
      - DROWNED
      - ELDER_GUARDIAN
      - ENDERMAN
      - ENDERMITE
      - ENDER_DRAGON
      - EVOKER
      - FOX
      - FROG
      - GHAST
      - GIANT
      - GLOW_SQUID
      - GOAT
      - GUARDIAN
      - HOGLIN
      - HORSE
      - HUSK
      - ILLUSIONER
      - IRON_GOLEM
      - LLAMA
      - MAGMA_CUBE
      - MOOSHROOM
      - MULE
      - OCELOT
      - PANDA
      - PARROT
      - PHANTOM
      - PIG
      - PIGLIN
      - PIGLIN_BRUTE
      - PILLAGER
      - PLAYER
      - POLAR_BEAR
      - PUFFERFISH
      - RABBIT
      - RAVAGER
      - SALMON
      - SHEEP
      - SHULKER
      - SILVERFISH
      - SKELETON
      - SKELETON_HORSE
      - SLIME
      - SNIFFER
      - SNOW_GOLEM
      - SPIDER
      - SQUID
      - STRAY
      - STRIDER
      - TADPOLE
      - TRADER_LLAMA
      - TROPICAL_FISH
      - TURTLE
      - VEX
      - VILLAGER
      - VINDICATOR
      - WANDERING_TRADER
      - WARDEN
      - WITCH
      - WITHER
      - WITHER_SKELETON
      - WOLF
      - ZOGLIN
      - ZOMBIE
      - ZOMBIE_HORSE
      - ZOMBIE_VILLAGER
      - ZOMBIFIED_PIGLIN
Llama: enum!  # 
    values: 
      - LLAMA
      - TRADER_LLAMA
Llama.Color: enum?  # 
    values: 
      - BROWN
      - CREAMY
      - GRAY
      - WHITE
Material: enum!  # 
ModifyEffect.Operation: enum?  # 
    values: 
      - ADD
      - DIVIDE
      - MULTIPLY
      - SET
      - SUBTRACT
Particle: enum!  # 
Phantom: enum!  # 
    values: 
      - PHANTOM
PiglinAbstract: enum!  # 
    values: 
      - PIGLIN
      - PIGLIN_BRUTE
PlayerTeleportEvent.TeleportCause: enum?  # 
    values: 
      - CHORUS_FRUIT
      - COMMAND
      - DISMOUNT
      - ENDER_PEARL
      - END_GATEWAY
      - END_PORTAL
      - EXIT_BED
      - NETHER_PORTAL
      - PLUGIN
      - SPECTATE
      - UNKNOWN
PotionEffectType: enum!  # 
    values: 
      - absorption
      - bad_omen
      - blindness
      - conduit_power
      - darkness
      - dolphins_grace
      - fire_resistance
      - glowing
      - haste
      - health_boost
      - hero_of_the_village
      - hunger
      - infested
      - instant_damage
      - instant_health
      - invisibility
      - jump_boost
      - levitation
      - luck
      - mining_fatigue
      - nausea
      - night_vision
      - oozing
      - poison
      - raid_omen
      - regeneration
      - resistance
      - saturation
      - slow_falling
      - slowness
      - speed
      - strength
      - trial_omen
      - unluck
      - water_breathing
      - weakness
      - weaving
      - wind_charged
      - wither
PotionType: enum!  # 
    values: 
      - awkward
      - fire_resistance
      - harming
      - healing
      - infested
      - invisibility
      - leaping
      - long_fire_resistance
      - long_invisibility
      - long_leaping
      - long_night_vision
      - long_poison
      - long_regeneration
      - long_slow_falling
      - long_slowness
      - long_strength
      - long_swiftness
      - long_turtle_master
      - long_water_breathing
      - long_weakness
      - luck
      - mundane
      - night_vision
      - oozing
      - poison
      - regeneration
      - slow_falling
      - slowness
      - strength
      - strong_harming
      - strong_healing
      - strong_leaping
      - strong_poison
      - strong_regeneration
      - strong_slowness
      - strong_strength
      - strong_swiftness
      - strong_turtle_master
      - swiftness
      - thick
      - turtle_master
      - water
      - water_breathing
      - weakness
      - weaving
      - wind_charged
Rabbit: enum!  # 
    values: 
      - RABBIT
Rabbit.Type: enum?  # 
    values: 
      - BLACK
      - BLACK_AND_WHITE
      - BROWN
      - GOLD
      - SALT_AND_PEPPER
      - THE_KILLER_BUNNY
      - WHITE
Slime: enum!  # 
    values: 
      - MAGMA_CUBE
      - SLIME
Sound: enum!  # 
SpectralArrow: enum!  # 
    values: 
      - SPECTRAL_ARROW
ThrowableProjectile: enum!  # 
    values: 
      - EGG
      - ENDER_PEARL
      - EXPERIENCE_BOTTLE
      - LINGERING_POTION
      - SNOWBALL
      - SPLASH_POTION
      - TRIDENT
ThrownPotion: enum!  # 
    values: 
      - LINGERING_POTION
      - SPLASH_POTION
TNTPrimed: enum!  # 
    values: 
      - TNT
Trident: enum!  # 
    values: 
      - TRIDENT
TrimMaterial: enum!  # 
    values: 
      - amethyst
      - copper
      - diamond
      - emerald
      - gold
      - iron
      - lapis
      - netherite
      - quartz
      - redstone
      - resin
TrimPattern: enum!  # 
    values: 
      - bolt
      - coast
      - dune
      - eye
      - flow
      - host
      - raiser
      - rib
      - sentry
      - shaper
      - silence
      - snout
      - spire
      - tide
      - vex
      - ward
      - wayfinder
      - wild
WitherSkull: enum!  # 
    values: 
      - WITHER_SKULL
Wolf: enum!  # 
    values: 
      - WOLF
BlockData: BlockDataData!  # 
Component: string!  # 
ConditionList: Condition{}?  # 
ConditionListWrapper: ConditionList!  # 
Duration: number!  # 
EffectList: Effect{}?  # 
Expression: string!  # 
ExpressiveMessage: string!  # 
InventorySlot: EquipmentSlot!  # 
ItemStack: ItemStackData!  # 
LoreData: string[]!  # 
PlusUltraSkillsContainer: SkillsContainer!  # 
RangeData: string!  # 
SkillsContainer: SkillData{}?  # 
Song: string!  # 
